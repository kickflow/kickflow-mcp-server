/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * kickflow REST API v1
 * kickflowの開発者用REST API (v1)
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


/**
 * 指定した組織図内のチーム一覧を取得します。

parentIdを指定した場合は指定した親チームの配下チームの一覧を、parentIdを指定しない場合は組織図内のルートのチーム一覧を返します。

このAPIの実行には、チームの管理権限が必要です。
 * @summary チーム一覧を取得
 */
export const listTeamsQueryPageDefault = 1;export const listTeamsQueryPerPageDefault = 25;
export const listTeamsQueryPerPageMax = 100;


export const listTeamsQueryParams = zod.object({
  "parentId": zod.string().optional().describe('親チームのUUID'),
  "page": zod.number().min(1).default(listTeamsQueryPageDefault).describe('ページ'),
  "perPage": zod.number().min(1).max(listTeamsQueryPerPageMax).default(listTeamsQueryPerPageDefault).describe('1ページあたりの件数')
})

export const listTeamsResponseNameMax = 255;
export const listTeamsResponseCodeMax = 255;
export const listTeamsResponseUsersCountMin = 0;


export const listTeamsResponseItem = zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "name": zod.string().max(listTeamsResponseNameMax).describe('名前'),
  "fullName": zod.string().describe('上位組織を含む名前'),
  "code": zod.string().max(listTeamsResponseCodeMax).describe('コード'),
  "approveOnly": zod.boolean().describe('承認専用チームかどうか'),
  "usersCount": zod.number().min(listTeamsResponseUsersCountMin).describe('ユーザー数'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('チーム')
export const listTeamsResponse = zod.array(listTeamsResponseItem)

/**
 * 指定した組織図内にチームを作成します。

このAPIの実行には、チームの管理権限が必要です。
 * @summary チームを作成
 */
export const createTeamBody = zod.object({
  "name": zod.string().describe('名前'),
  "code": zod.string().optional().describe('コード。未指定の場合、ランダムな英数字がセットされます。'),
  "parentId": zod.string().uuid().optional().describe('親チームのUUID。nullの場合、作成したチームはルートになります。'),
  "approveOnly": zod.boolean().optional().describe('承認専用チームかどうか')
}).describe('チームを作成するときのrequest body')

export const createTeamResponseNameMax = 255;
export const createTeamResponseCodeMax = 255;
export const createTeamResponseUsersCountMin = 0;
export const createTeamResponseParentNameMax = 255;
export const createTeamResponseParentCodeMax = 255;
export const createTeamResponseParentUsersCountMin = 0;
export const createTeamResponseChildrenItemNameMax = 255;
export const createTeamResponseChildrenItemCodeMax = 255;
export const createTeamResponseChildrenItemUsersCountMin = 0;
export const createTeamResponseUsersItemGradesItemNameMax = 255;
export const createTeamResponseUsersItemGradesItemLevelMin = 0;

export const createTeamResponseUsersItemGradesItemLevelMax = 255;
export const createTeamResponseUsersItemGradesItemCodeMax = 255;
export const createTeamResponseUsersItemGradesItemIsDefaultDefault = false;export const createTeamResponseUsersItemEmailMax = 255;
export const createTeamResponseUsersItemCodeMax = 255;
export const createTeamResponseUsersItemFirstNameMax = 255;
export const createTeamResponseUsersItemLastNameMax = 255;
export const createTeamResponseUsersItemFullNameMax = 255;
export const createTeamResponseUsersItemEmployeeIdMax = 255;


export const createTeamResponse = zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "name": zod.string().max(createTeamResponseNameMax).describe('名前'),
  "fullName": zod.string().describe('上位組織を含む名前'),
  "code": zod.string().max(createTeamResponseCodeMax).describe('コード'),
  "approveOnly": zod.boolean().describe('承認専用チームかどうか'),
  "usersCount": zod.number().min(createTeamResponseUsersCountMin).describe('ユーザー数'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('チーム').and(zod.object({
  "parent": zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "name": zod.string().max(createTeamResponseParentNameMax).describe('名前'),
  "fullName": zod.string().describe('上位組織を含む名前'),
  "code": zod.string().max(createTeamResponseParentCodeMax).describe('コード'),
  "approveOnly": zod.boolean().describe('承認専用チームかどうか'),
  "usersCount": zod.number().min(createTeamResponseParentUsersCountMin).describe('ユーザー数'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('チーム').or(zod.object({

}).nullable()).optional().describe('親チーム'),
  "children": zod.array(zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "name": zod.string().max(createTeamResponseChildrenItemNameMax).describe('名前'),
  "fullName": zod.string().describe('上位組織を含む名前'),
  "code": zod.string().max(createTeamResponseChildrenItemCodeMax).describe('コード'),
  "approveOnly": zod.boolean().describe('承認専用チームかどうか'),
  "usersCount": zod.number().min(createTeamResponseChildrenItemUsersCountMin).describe('ユーザー数'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('チーム')).describe('子チーム'),
  "users": zod.array(zod.object({
  "grades": zod.array(zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "name": zod.string().max(createTeamResponseUsersItemGradesItemNameMax).describe('名前'),
  "level": zod.number().min(createTeamResponseUsersItemGradesItemLevelMin).max(createTeamResponseUsersItemGradesItemLevelMax).describe('レベル'),
  "code": zod.string().max(createTeamResponseUsersItemGradesItemCodeMax).nullable().describe('コード'),
  "isDefault": zod.boolean().describe('デフォルトの役職かどうか'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('役職')).min(1).describe('役職'),
  "leader": zod.boolean().describe('上長かどうか')
}).and(zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "email": zod.string().email().max(createTeamResponseUsersItemEmailMax).describe('メールアドレス'),
  "code": zod.string().max(createTeamResponseUsersItemCodeMax).describe('コード'),
  "firstName": zod.string().max(createTeamResponseUsersItemFirstNameMax).describe('名'),
  "lastName": zod.string().max(createTeamResponseUsersItemLastNameMax).describe('姓'),
  "fullName": zod.string().max(createTeamResponseUsersItemFullNameMax).describe('フルネーム'),
  "employeeId": zod.string().max(createTeamResponseUsersItemEmployeeIdMax).nullish().describe('社員番号'),
  "image": zod.object({
  "100x100": zod.string().nullable(),
  "64x64": zod.string().nullable(),
  "32x32": zod.string().nullable()
}).describe('ユーザー画像のURL。サイズごとに複数のURLを返します。'),
  "status": zod.enum(['invited', 'activated', 'suspended', 'deactivated']).describe('ステータス'),
  "locale": zod.string().describe('ロケール（jaまたはen）'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時'),
  "deactivatedAt": zod.string().datetime({}).nullish().describe('削除日時')
}).describe('ユーザー')).describe('チームの所属メンバー')).describe('メンバーの配列。\n\n注意：パフォーマンス上の理由から、100件を超えるメンバーを返すことはできません。101件以上のメンバーをすべて取得したい場合は、別途メンバー取得APIを呼び出してください。')
})).describe('チームの詳細')

/**
 * チームを一件取得します。

このAPIの実行には、チームの管理権限が必要です。
 * @summary チームを取得
 */
export const getTeamResponseNameMax = 255;
export const getTeamResponseCodeMax = 255;
export const getTeamResponseUsersCountMin = 0;
export const getTeamResponseParentNameMax = 255;
export const getTeamResponseParentCodeMax = 255;
export const getTeamResponseParentUsersCountMin = 0;
export const getTeamResponseChildrenItemNameMax = 255;
export const getTeamResponseChildrenItemCodeMax = 255;
export const getTeamResponseChildrenItemUsersCountMin = 0;
export const getTeamResponseUsersItemGradesItemNameMax = 255;
export const getTeamResponseUsersItemGradesItemLevelMin = 0;

export const getTeamResponseUsersItemGradesItemLevelMax = 255;
export const getTeamResponseUsersItemGradesItemCodeMax = 255;
export const getTeamResponseUsersItemGradesItemIsDefaultDefault = false;export const getTeamResponseUsersItemEmailMax = 255;
export const getTeamResponseUsersItemCodeMax = 255;
export const getTeamResponseUsersItemFirstNameMax = 255;
export const getTeamResponseUsersItemLastNameMax = 255;
export const getTeamResponseUsersItemFullNameMax = 255;
export const getTeamResponseUsersItemEmployeeIdMax = 255;


export const getTeamResponse = zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "name": zod.string().max(getTeamResponseNameMax).describe('名前'),
  "fullName": zod.string().describe('上位組織を含む名前'),
  "code": zod.string().max(getTeamResponseCodeMax).describe('コード'),
  "approveOnly": zod.boolean().describe('承認専用チームかどうか'),
  "usersCount": zod.number().min(getTeamResponseUsersCountMin).describe('ユーザー数'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('チーム').and(zod.object({
  "parent": zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "name": zod.string().max(getTeamResponseParentNameMax).describe('名前'),
  "fullName": zod.string().describe('上位組織を含む名前'),
  "code": zod.string().max(getTeamResponseParentCodeMax).describe('コード'),
  "approveOnly": zod.boolean().describe('承認専用チームかどうか'),
  "usersCount": zod.number().min(getTeamResponseParentUsersCountMin).describe('ユーザー数'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('チーム').or(zod.object({

}).nullable()).optional().describe('親チーム'),
  "children": zod.array(zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "name": zod.string().max(getTeamResponseChildrenItemNameMax).describe('名前'),
  "fullName": zod.string().describe('上位組織を含む名前'),
  "code": zod.string().max(getTeamResponseChildrenItemCodeMax).describe('コード'),
  "approveOnly": zod.boolean().describe('承認専用チームかどうか'),
  "usersCount": zod.number().min(getTeamResponseChildrenItemUsersCountMin).describe('ユーザー数'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('チーム')).describe('子チーム'),
  "users": zod.array(zod.object({
  "grades": zod.array(zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "name": zod.string().max(getTeamResponseUsersItemGradesItemNameMax).describe('名前'),
  "level": zod.number().min(getTeamResponseUsersItemGradesItemLevelMin).max(getTeamResponseUsersItemGradesItemLevelMax).describe('レベル'),
  "code": zod.string().max(getTeamResponseUsersItemGradesItemCodeMax).nullable().describe('コード'),
  "isDefault": zod.boolean().describe('デフォルトの役職かどうか'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('役職')).min(1).describe('役職'),
  "leader": zod.boolean().describe('上長かどうか')
}).and(zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "email": zod.string().email().max(getTeamResponseUsersItemEmailMax).describe('メールアドレス'),
  "code": zod.string().max(getTeamResponseUsersItemCodeMax).describe('コード'),
  "firstName": zod.string().max(getTeamResponseUsersItemFirstNameMax).describe('名'),
  "lastName": zod.string().max(getTeamResponseUsersItemLastNameMax).describe('姓'),
  "fullName": zod.string().max(getTeamResponseUsersItemFullNameMax).describe('フルネーム'),
  "employeeId": zod.string().max(getTeamResponseUsersItemEmployeeIdMax).nullish().describe('社員番号'),
  "image": zod.object({
  "100x100": zod.string().nullable(),
  "64x64": zod.string().nullable(),
  "32x32": zod.string().nullable()
}).describe('ユーザー画像のURL。サイズごとに複数のURLを返します。'),
  "status": zod.enum(['invited', 'activated', 'suspended', 'deactivated']).describe('ステータス'),
  "locale": zod.string().describe('ロケール（jaまたはen）'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時'),
  "deactivatedAt": zod.string().datetime({}).nullish().describe('削除日時')
}).describe('ユーザー')).describe('チームの所属メンバー')).describe('メンバーの配列。\n\n注意：パフォーマンス上の理由から、100件を超えるメンバーを返すことはできません。101件以上のメンバーをすべて取得したい場合は、別途メンバー取得APIを呼び出してください。')
})).describe('チームの詳細')

/**
 * チームを更新します。

このAPIの実行には、チームの管理権限が必要です。
 * @summary チームを編集
 */
export const updateTeamBody = zod.object({
  "name": zod.string().optional().describe('名前'),
  "code": zod.string().optional().describe('コード。未指定の場合、ランダムな英数字がセットされます。'),
  "parentId": zod.string().uuid().optional().describe('親チームのID'),
  "approveOnly": zod.boolean().optional().describe('承認専用チームかどうか')
}).describe('チームを更新するときのrequest body')

export const updateTeamResponseNameMax = 255;
export const updateTeamResponseCodeMax = 255;
export const updateTeamResponseUsersCountMin = 0;
export const updateTeamResponseParentNameMax = 255;
export const updateTeamResponseParentCodeMax = 255;
export const updateTeamResponseParentUsersCountMin = 0;
export const updateTeamResponseChildrenItemNameMax = 255;
export const updateTeamResponseChildrenItemCodeMax = 255;
export const updateTeamResponseChildrenItemUsersCountMin = 0;
export const updateTeamResponseUsersItemGradesItemNameMax = 255;
export const updateTeamResponseUsersItemGradesItemLevelMin = 0;

export const updateTeamResponseUsersItemGradesItemLevelMax = 255;
export const updateTeamResponseUsersItemGradesItemCodeMax = 255;
export const updateTeamResponseUsersItemGradesItemIsDefaultDefault = false;export const updateTeamResponseUsersItemEmailMax = 255;
export const updateTeamResponseUsersItemCodeMax = 255;
export const updateTeamResponseUsersItemFirstNameMax = 255;
export const updateTeamResponseUsersItemLastNameMax = 255;
export const updateTeamResponseUsersItemFullNameMax = 255;
export const updateTeamResponseUsersItemEmployeeIdMax = 255;


export const updateTeamResponse = zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "name": zod.string().max(updateTeamResponseNameMax).describe('名前'),
  "fullName": zod.string().describe('上位組織を含む名前'),
  "code": zod.string().max(updateTeamResponseCodeMax).describe('コード'),
  "approveOnly": zod.boolean().describe('承認専用チームかどうか'),
  "usersCount": zod.number().min(updateTeamResponseUsersCountMin).describe('ユーザー数'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('チーム').and(zod.object({
  "parent": zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "name": zod.string().max(updateTeamResponseParentNameMax).describe('名前'),
  "fullName": zod.string().describe('上位組織を含む名前'),
  "code": zod.string().max(updateTeamResponseParentCodeMax).describe('コード'),
  "approveOnly": zod.boolean().describe('承認専用チームかどうか'),
  "usersCount": zod.number().min(updateTeamResponseParentUsersCountMin).describe('ユーザー数'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('チーム').or(zod.object({

}).nullable()).optional().describe('親チーム'),
  "children": zod.array(zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "name": zod.string().max(updateTeamResponseChildrenItemNameMax).describe('名前'),
  "fullName": zod.string().describe('上位組織を含む名前'),
  "code": zod.string().max(updateTeamResponseChildrenItemCodeMax).describe('コード'),
  "approveOnly": zod.boolean().describe('承認専用チームかどうか'),
  "usersCount": zod.number().min(updateTeamResponseChildrenItemUsersCountMin).describe('ユーザー数'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('チーム')).describe('子チーム'),
  "users": zod.array(zod.object({
  "grades": zod.array(zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "name": zod.string().max(updateTeamResponseUsersItemGradesItemNameMax).describe('名前'),
  "level": zod.number().min(updateTeamResponseUsersItemGradesItemLevelMin).max(updateTeamResponseUsersItemGradesItemLevelMax).describe('レベル'),
  "code": zod.string().max(updateTeamResponseUsersItemGradesItemCodeMax).nullable().describe('コード'),
  "isDefault": zod.boolean().describe('デフォルトの役職かどうか'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('役職')).min(1).describe('役職'),
  "leader": zod.boolean().describe('上長かどうか')
}).and(zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "email": zod.string().email().max(updateTeamResponseUsersItemEmailMax).describe('メールアドレス'),
  "code": zod.string().max(updateTeamResponseUsersItemCodeMax).describe('コード'),
  "firstName": zod.string().max(updateTeamResponseUsersItemFirstNameMax).describe('名'),
  "lastName": zod.string().max(updateTeamResponseUsersItemLastNameMax).describe('姓'),
  "fullName": zod.string().max(updateTeamResponseUsersItemFullNameMax).describe('フルネーム'),
  "employeeId": zod.string().max(updateTeamResponseUsersItemEmployeeIdMax).nullish().describe('社員番号'),
  "image": zod.object({
  "100x100": zod.string().nullable(),
  "64x64": zod.string().nullable(),
  "32x32": zod.string().nullable()
}).describe('ユーザー画像のURL。サイズごとに複数のURLを返します。'),
  "status": zod.enum(['invited', 'activated', 'suspended', 'deactivated']).describe('ステータス'),
  "locale": zod.string().describe('ロケール（jaまたはen）'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時'),
  "deactivatedAt": zod.string().datetime({}).nullish().describe('削除日時')
}).describe('ユーザー')).describe('チームの所属メンバー')).describe('メンバーの配列。\n\n注意：パフォーマンス上の理由から、100件を超えるメンバーを返すことはできません。101件以上のメンバーをすべて取得したい場合は、別途メンバー取得APIを呼び出してください。')
})).describe('チームの詳細')

/**
 * チームのメンバー一覧を取得します。

このAPIの実行には、チームの管理権限が必要です。
 * @summary チームのメンバー一覧を取得
 */
export const listTeamMembersQueryPageDefault = 1;export const listTeamMembersQueryPerPageDefault = 25;
export const listTeamMembersQueryPerPageMax = 100;


export const listTeamMembersQueryParams = zod.object({
  "page": zod.number().min(1).default(listTeamMembersQueryPageDefault).describe('ページ。1が先頭のページ。'),
  "perPage": zod.number().min(1).max(listTeamMembersQueryPerPageMax).default(listTeamMembersQueryPerPageDefault).describe('1ページあたりの件数')
})

export const listTeamMembersResponseGradesItemNameMax = 255;
export const listTeamMembersResponseGradesItemLevelMin = 0;

export const listTeamMembersResponseGradesItemLevelMax = 255;
export const listTeamMembersResponseGradesItemCodeMax = 255;
export const listTeamMembersResponseGradesItemIsDefaultDefault = false;export const listTeamMembersResponseEmailMax = 255;
export const listTeamMembersResponseCodeMax = 255;
export const listTeamMembersResponseFirstNameMax = 255;
export const listTeamMembersResponseLastNameMax = 255;
export const listTeamMembersResponseFullNameMax = 255;
export const listTeamMembersResponseEmployeeIdMax = 255;


export const listTeamMembersResponseItem = zod.object({
  "grades": zod.array(zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "name": zod.string().max(listTeamMembersResponseGradesItemNameMax).describe('名前'),
  "level": zod.number().min(listTeamMembersResponseGradesItemLevelMin).max(listTeamMembersResponseGradesItemLevelMax).describe('レベル'),
  "code": zod.string().max(listTeamMembersResponseGradesItemCodeMax).nullable().describe('コード'),
  "isDefault": zod.boolean().describe('デフォルトの役職かどうか'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時')
}).describe('役職')).min(1).describe('役職'),
  "leader": zod.boolean().describe('上長かどうか')
}).and(zod.object({
  "id": zod.string().uuid().describe('UUID'),
  "email": zod.string().email().max(listTeamMembersResponseEmailMax).describe('メールアドレス'),
  "code": zod.string().max(listTeamMembersResponseCodeMax).describe('コード'),
  "firstName": zod.string().max(listTeamMembersResponseFirstNameMax).describe('名'),
  "lastName": zod.string().max(listTeamMembersResponseLastNameMax).describe('姓'),
  "fullName": zod.string().max(listTeamMembersResponseFullNameMax).describe('フルネーム'),
  "employeeId": zod.string().max(listTeamMembersResponseEmployeeIdMax).nullish().describe('社員番号'),
  "image": zod.object({
  "100x100": zod.string().nullable(),
  "64x64": zod.string().nullable(),
  "32x32": zod.string().nullable()
}).describe('ユーザー画像のURL。サイズごとに複数のURLを返します。'),
  "status": zod.enum(['invited', 'activated', 'suspended', 'deactivated']).describe('ステータス'),
  "locale": zod.string().describe('ロケール（jaまたはen）'),
  "createdAt": zod.string().datetime({}).describe('作成日時'),
  "updatedAt": zod.string().datetime({}).describe('更新日時'),
  "deactivatedAt": zod.string().datetime({}).nullish().describe('削除日時')
}).describe('ユーザー')).describe('チームの所属メンバー')
export const listTeamMembersResponse = zod.array(listTeamMembersResponseItem)

/**
 * 指定したチームにメンバーを追加します。最大10人まで同時に追加可能です。

このAPIの実行には、チームの管理権限が必要です。

注意: チームに上長は最低一人必要です。上長が不在の場合、APIは422 Unprocessable Entityを返します。
 * @summary チームにメンバーを追加
 */
export const createTeamMembersBodyUsersMax = 10;


export const createTeamMembersBody = zod.object({
  "users": zod.array(zod.object({
  "id": zod.string().uuid().describe('ユーザーのUUID'),
  "leader": zod.boolean().describe('上長の場合、true'),
  "gradeIds": zod.array(zod.string().uuid()).min(1).optional().describe('役職のUUID')
})).min(1).max(createTeamMembersBodyUsersMax).describe('メンバーに追加したいユーザー情報の配列')
})

/**
 * 指定したチームからメンバーを削除します。最大10人まで同時に削除可能です。

このAPIの実行には、チームの管理権限が必要です。

注意: 削除後もメンバーが残る場合、チームに上長は最低一人必要です。メンバー削除によって上長が不在になる場合、APIは422 Unprocessable Entityを返します。
 * @summary チームからメンバーを削除
 */
export const deleteTeamMembersBodyUserIdsMax = 10;


export const deleteTeamMembersBody = zod.object({
  "userIds": zod.array(zod.string().uuid()).min(1).max(deleteTeamMembersBodyUserIdsMax).describe('ユーザーのUUIDの配列')
})

/**
 * 指定したメンバーを更新します。

このAPIの実行には、チームの管理権限が必要です。

注意: チームに上長は最低一人は必要です。上長が不在の場合、APIは422 Unprocessable Entityを返します。
 * @summary チームのメンバーを更新
 */
export const updateTeamMemberBody = zod.object({
  "leader": zod.boolean().describe('上長の場合、true'),
  "gradeIds": zod.array(zod.string().uuid()).min(1).describe('役職のUUID')
})

