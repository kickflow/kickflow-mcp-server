/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * カテゴリの一覧を取得
         * @description カテゴリの一覧を取得します。
         */
        get: operations["get-categories"];
        put?: never;
        /**
         * カテゴリを作成
         * @description カテゴリを作成します。
         *
         *     このAPIの実行には、ワークフロー関連設定の管理権限が必要です。
         */
        post: operations["post-categories"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/categories/{categoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description カテゴリのUUID */
                categoryId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * カテゴリを削除
         * @description カテゴリを削除します。
         *
         *     このAPIの実行には、ワークフロー関連設定の管理権限が必要です。
         */
        delete: operations["delete-categories-categoryId"];
        options?: never;
        head?: never;
        /**
         * カテゴリを更新
         * @description カテゴリを更新します。
         *
         *     このAPIの実行には、ワークフロー関連設定の管理権限が必要です。
         */
        patch: operations["patch-categories-categoryId"];
        trace?: never;
    };
    "/v1/folders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * フォルダの一覧を取得
         * @description フォルダの一覧を取得します。
         */
        get: operations["get-folders"];
        put?: never;
        /**
         * フォルダを作成
         * @description フォルダを作成します。
         *
         *     このAPIの実行には、ワークフロー関連設定の管理権限が必要です。
         */
        post: operations["post-folders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/folders/{folderId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description フォルダのUUIDまたはコード */
                folderId: string;
            };
            cookie?: never;
        };
        /**
         * フォルダを取得
         * @description フォルダを一件取得します。
         */
        get: operations["get-folders-folderId"];
        put?: never;
        post?: never;
        /**
         * フォルダを削除
         * @description フォルダを削除します。
         *
         *     このAPIの実行には、ワークフロー関連設定の管理権限が必要です。
         *
         *     注意：このフォルダ以下のすべてのフォルダ・ワークフロー・経路・パイプラインも削除されます。
         */
        delete: operations["delete-folders-folderId"];
        options?: never;
        head?: never;
        /**
         * フォルダを更新
         * @description フォルダを更新します。
         *
         *     このAPIの実行には、ワークフロー関連設定の管理権限が必要です。
         */
        patch: operations["patch-folders-folderId"];
        trace?: never;
    };
    "/v1/generalMasters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 汎用マスタの一覧を取得
         * @description 汎用マスタの一覧を取得します。
         *
         *     このAPIの実行には、汎用マスタの管理権限が必要です。
         */
        get: operations["get-generalMasters"];
        put?: never;
        /**
         * 汎用マスタを作成
         * @description 汎用マスタを作成します。
         *
         *     このAPIの実行には、汎用マスタの管理権限が必要です。
         */
        post: operations["post-generalMasters"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generalMasters/{generalMasterId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 汎用マスタのUUIDまたはコード */
                generalMasterId: string;
            };
            cookie?: never;
        };
        /**
         * 汎用マスタを取得
         * @description 汎用マスタを一件取得します。
         *
         *     このAPIの実行には、汎用マスタの管理権限が必要です。
         */
        get: operations["get-generalMasters-generalMasterId"];
        put?: never;
        post?: never;
        /**
         * 汎用マスタを削除
         * @description 汎用マスタを削除します。この汎用マスタのすべてのアイテムも同時に削除されます。
         *
         *     このAPIの実行には、汎用マスタの管理権限が必要です。
         */
        delete: operations["delete-generalMasters-generalMasterId"];
        options?: never;
        head?: never;
        /**
         * 汎用マスタを更新
         * @description 汎用マスタを更新します。
         *
         *     このAPIの実行には、汎用マスタの管理権限が必要です。
         */
        patch: operations["patch-generalMasters-generalMasterId"];
        trace?: never;
    };
    "/v1/generalMasters/{generalMasterId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 汎用マスタのUUIDまたはコード */
                generalMasterId: string;
            };
            cookie?: never;
        };
        /**
         * 汎用マスタアイテムの一覧を取得
         * @description 汎用マスタアイテムの一覧を取得します。
         */
        get: operations["get-generalMasters-generalMasterId-items"];
        put?: never;
        /**
         * 汎用マスタアイテムを作成
         * @description 汎用マスタアイテムを作成します。
         *
         *     このAPIの実行には、汎用マスタの管理権限が必要です。
         */
        post: operations["post-generalMasters-generalMasterId-items"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generalMasters/{generalMasterId}/items/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 汎用マスタのUUIDまたはコード */
                generalMasterId: string;
                /** @description 汎用マスタアイテムのUUIDまたはコード */
                itemId: string;
            };
            cookie?: never;
        };
        /**
         * 汎用マスタアイテムを取得
         * @description 汎用マスタアイテムを一件取得します。
         */
        get: operations["get-generalMasters-generalMasterId-items-itemId"];
        put?: never;
        post?: never;
        /**
         * 汎用マスタアイテムを削除
         * @description 汎用マスタアイテムを削除します。
         *
         *     このAPIの実行には、汎用マスタの管理権限が必要です。
         */
        delete: operations["delete-generalMasters-generalMasterId-items-itemId"];
        options?: never;
        head?: never;
        /**
         * 汎用マスタアイテムを更新
         * @description 汎用マスタアイテムを更新します。
         *
         *     このAPIの実行には、汎用マスタの管理権限が必要です。
         */
        patch: operations["patch-generalMasters-generalMasterId-items-itemId"];
        trace?: never;
    };
    "/v1/grades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 役職の一覧を取得
         * @description 役職の一覧を取得します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。
         */
        get: operations["get-grades"];
        put?: never;
        /**
         * 役職を作成
         * @description 役職を作成します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。
         */
        post: operations["post-grades"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/grades/{gradeId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 役職のUUIDまたはコード */
                gradeId: string;
            };
            cookie?: never;
        };
        /**
         * 役職を取得
         * @description 役職を一件取得します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。
         */
        get: operations["get-grades-gradeId"];
        put?: never;
        post?: never;
        /**
         * 役職を削除
         * @description 役職を削除します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。
         *
         *     注意：この役職を使用しているユーザーがいる場合、エラーとなります。先にユーザーから対象の役職を外してください。
         */
        delete: operations["delete-grades-gradeId"];
        options?: never;
        head?: never;
        /**
         * 役職を更新
         * @description 役職を更新します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。
         */
        patch: operations["patch-grades-gradeId"];
        trace?: never;
    };
    "/v1/grades/{gradeId}/default": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 役職のUUIDまたはコード */
                gradeId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * デフォルトの役職を変更
         * @description 指定した役職をデフォルトにします。
         *     同時に、これまでデフォルトだった役職は自動的にデフォルトではなくなります。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。
         */
        post: operations["post-grades-gradeId-default"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizationCharts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 組織図の一覧を取得
         * @description 組織図の一覧を取得します。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         *
         *     注意：パフォーマンス上の理由から、組織図の一覧取得時は組織図内のチームのリストがレスポンスに含まれません。
         *     組織図のすべての情報を取得したい場合は、組織図を一件だけ取得するAPI経由で取得してください。
         */
        get: operations["get-organizationCharts"];
        put?: never;
        /**
         * 組織図を作成
         * @description 組織図を作成します。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         */
        post: operations["post-organizationCharts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizationCharts/{organizationChartId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
            };
            cookie?: never;
        };
        /**
         * 組織図を取得
         * @description 組織図を一件取得します。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         */
        get: operations["get-organizationCharts-organizationChartId"];
        put?: never;
        post?: never;
        /**
         * 組織図を削除
         * @description 組織図を削除します。同時に、組織図内のチームや所属もすべて削除されます。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         *
         *     注意：現在有効な組織図は削除できません。
         *     注意：組織図の削除は時間がかかることがあるため、削除は非同期で実行されます。削除の完了前にレスポンスを返すので注意してください。
         */
        delete: operations["delete-organizationCharts-organizationChartId"];
        options?: never;
        head?: never;
        /**
         * 組織図を更新
         * @description 組織図を更新します。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         */
        patch: operations["patch-organizationCharts-organizationChartId"];
        trace?: never;
    };
    "/v1/organizationChart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 現在の組織図を取得
         * @description 現在有効になっている組織図を取得します。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         */
        get: operations["get-organizationChart"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizationCharts/{organizationChartId}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 組織図を有効化
         * @description 指定した組織図を有効化し、ワークフローで使用する組織図を切り替えます。
         *     他の組織図に有効化の予定がある場合、それらの予定は削除されます。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         *
         *     注意：組織図の有効化は時間がかかることがあるため、有効化は非同期で実行されます。有効化の完了前にレスポンスを返すので注意してください。
         */
        post: operations["post-organizationCharts-organizationChartId-activate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizationCharts/{organizationChartId}/teams": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
            };
            cookie?: never;
        };
        /**
         * チーム一覧を取得
         * @description 指定した組織図内のチーム一覧を取得します。
         *
         *     parentIdを指定した場合は指定した親チームの配下チームの一覧を、parentIdを指定しない場合は組織図内のルートのチーム一覧を返します。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         */
        get: operations["get-organizationCharts-organizationChartId-teams"];
        put?: never;
        /**
         * チームを作成
         * @description 指定した組織図内にチームを作成します。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         */
        post: operations["post-organizationCharts-organizationChartId-teams"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizationCharts/{organizationChartId}/teams/{teamId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
                /** @description チームのUUIDまたはコード */
                teamId: string;
            };
            cookie?: never;
        };
        /**
         * チームを取得
         * @description チームを一件取得します。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         */
        get: operations["get-teams-teamId"];
        put?: never;
        post?: never;
        /**
         * チームを削除
         * @description チームを削除します。同時に、このチームの所属もすべて削除されます。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         */
        delete: operations["delete-teams-teamId"];
        options?: never;
        head?: never;
        /**
         * チームを編集
         * @description チームを更新します。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         */
        patch: operations["patch-teams-teamId"];
        trace?: never;
    };
    "/v1/organizationCharts/{organizationChartId}/teams/{teamId}/memberships": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
                /** @description チームのUUIDまたはコード */
                teamId: string;
            };
            cookie?: never;
        };
        /**
         * チームのメンバー一覧を取得
         * @description チームのメンバー一覧を取得します。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         */
        get: operations["get-organizationCharts-organizationChartId-teams-teamId-memberships"];
        put?: never;
        /**
         * チームにメンバーを追加
         * @description 指定したチームにメンバーを追加します。最大10人まで同時に追加可能です。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         *
         *     注意: チームに上長は最低一人必要です。上長が不在の場合、APIは422 Unprocessable Entityを返します。
         */
        post: operations["post-teams-teamId-members"];
        /**
         * チームからメンバーを削除
         * @description 指定したチームからメンバーを削除します。最大10人まで同時に削除可能です。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         *
         *     注意: 削除後もメンバーが残る場合、チームに上長は最低一人必要です。メンバー削除によって上長が不在になる場合、APIは422 Unprocessable Entityを返します。
         */
        delete: operations["delete-teams-teamId-members"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/organizationCharts/{organizationChartId}/teams/{teamId}/memberships/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
                /** @description チームのUUIDまたはコード */
                teamId: string;
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * チームのメンバーを更新
         * @description 指定したメンバーを更新します。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         *
         *     注意: チームに上長は最低一人は必要です。上長が不在の場合、APIは422 Unprocessable Entityを返します。
         */
        patch: operations["patch-teams-teamId-memberships-userId"];
        trace?: never;
    };
    "/v1/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 管理者ロールの一覧を取得
         * @description 管理者ロールの一覧を取得します。
         *
         *     このAPIの実行には、ロールの管理権限が必要です。
         */
        get: operations["get-roles"];
        put?: never;
        /**
         * 管理者ロールを作成
         * @description 管理者ロールを作成します。
         *
         *     このAPIの実行には、ロールの管理権限が必要です。
         */
        post: operations["post-roles"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/roles/{roleId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 管理者ロールのUUID */
                roleId: string;
            };
            cookie?: never;
        };
        /**
         * 管理者ロールを取得
         * @description 管理者ロールを一件取得します。
         *
         *     このAPIの実行には、ロールの管理権限が必要です。
         */
        get: operations["get-roles-roleId"];
        put?: never;
        post?: never;
        /**
         * 管理者ロールを削除
         * @description 管理者ロールを削除します。
         *
         *     このAPIの実行には、ロールの管理権限が必要です。
         */
        delete: operations["delete-roles-roleId"];
        options?: never;
        head?: never;
        /**
         * 管理者ロールを更新
         * @description 管理者ロールを更新します。
         *
         *     このAPIの実行には、ロールの管理権限が必要です。
         */
        patch: operations["patch-roles-roleId"];
        trace?: never;
    };
    "/v1/roles/{roleId}/memberships": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 管理者ロールのUUID */
                roleId: string;
            };
            cookie?: never;
        };
        /**
         * 管理者ロールのメンバー一覧を取得
         * @description 管理者ロールのメンバー一覧を取得します。
         *
         *     このAPIの実行には、ロールの管理権限が必要です。
         */
        get: operations["get-roles-roleId-memberships"];
        put?: never;
        /**
         * 管理者ロールにメンバーを追加
         * @description 管理者ロールにメンバーを追加します。最大10人まで複数のメンバーを同時に追加可能です。
         *
         *     このAPIの実行には、ロールの管理権限が必要です。
         */
        post: operations["post-roles-roleId-memberships"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/roles/{roleId}/memberships/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 管理者ロールのUUID */
                roleId: string;
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 管理者ロールからメンバーを削除
         * @description 管理者ロールからメンバーを削除します。
         *
         *     このAPIの実行には、ロールの管理権限が必要です。
         */
        delete: operations["delete-roles-roleId-memberships-userId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * チケット一覧を取得
         * @description チケットの一覧を取得します。複数の条件を組み合わせて、フィルタ可能です。
         *
         *     注意1：パフォーマンス上の理由から、チケットの一覧取得ではフォームの入力や承認経路などはレスポンスに含まれません。
         *     より詳細なチケット情報を取得したい場合は、チケットを一件だけ取得するAPIをで取得してください。
         *
         *     注意2：APIを実行するユーザーが閲覧可能なチケットのみ取得可能です。
         *     テナント内のすべてのチケットを対象としたい場合、APIを実行するユーザーがチケットの管理権限（閲覧）を持っている必要があります。
         */
        get: operations["get-tickets"];
        put?: never;
        /**
         * チケットを作成
         * @description チケットを作成します。
         */
        post: operations["post-tickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tickets/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 承認リクエスト一覧を取得
         * @description 現在のユーザーにアサインされている承認リクエストの一覧を取得します。複数の条件を組み合わせて、フィルタ可能です。
         *
         *     注意：パフォーマンス上の理由から、チケットの一覧取得ではフォームの入力や承認経路などはレスポンスに含まれません。
         *     より詳細なチケット情報を取得したい場合は、チケットを一件だけ取得するAPIをで取得してください。
         */
        get: operations["get-tickets-tasks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tickets/{ticketId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        /**
         * チケットを取得
         * @description チケットを一件取得します。フォームの入力や承認経路などを含む詳細なデータを返します。
         */
        get: operations["get-tickets-ticketId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * チケットを更新
         * @description チケットを更新します。
         *
         *     注意1: チケットのステータスが下書きまたは差し戻しの場合、申請者が更新可能です。
         *
         *     注意2: チケットのステータスが処理中の場合、承認者が承認者用フィールドのみ更新可能です。リクエストボディにはslipItemsまたはinputsのみ設定してください（他のパラメータは無視されます）。
         *
         *     注意3: 明細ワークフローの場合、slipItemsは必須です。
         */
        patch: operations["patch-tickets-ticketId"];
        trace?: never;
    };
    "/v1/tickets/{ticketId}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * チケットを承認または確認する
         * @description 指定したチケットを承認もしくは確認します。
         *     APIの実行ユーザーがチケットにアサインされていない場合、403 Forbiddenを返します。
         */
        post: operations["post-tickets-ticketId-approve"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tickets/{ticketId}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * チケットを差し戻す
         * @description 指定したチケットを差し戻します。
         *     APIの実行ユーザーがチケットにアサインされていない場合、403 Forbiddenを返します。
         */
        post: operations["post-tickets-ticketId-reject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tickets/{ticketId}/deny": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * チケットを却下する
         * @description 指定したチケットを却下します。
         *     APIの実行ユーザーがチケットにアサインされていない場合、403 Forbiddenを返します。
         */
        post: operations["post-tickets-ticketId-deny"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tickets/{ticketId}/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * チケットを取り下げる
         * @description 自分が作成したチケットを取り下げます。
         */
        post: operations["post-tickets-ticketId-withdraw"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tickets/{ticketId}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * チケットをアーカイブ
         * @description チケットをアーカイブします。チケットのステータスがアーカイブステータスに変わりますが、引き続きUIやAPIでチケットにはアクセス可能です。
         *
         *     注意：チケットをアーカイブ可能なユーザーはチケットのステータスによって異なります。詳しくは[ヘルプ](https://support.kickflow.com/hc/ja/articles/360058324973)をご覧ください。
         */
        post: operations["post-tickets-ticketId-archive"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tickets/{ticketId}/links": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        /**
         * チケットの関連チケットを取得する
         * @description 指定したチケットの関連チケットを取得します。
         */
        get: operations["get-tickets-ticketId-links"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tickets/{ticketId}/viewers": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        /**
         * 共有ユーザーの一覧を取得
         * @description チケットの共有ユーザー一覧を取得します。
         */
        get: operations["get-tickets-id-viewers"];
        put?: never;
        /**
         * 共有ユーザーを追加
         * @description チケットに共有ユーザーを追加します。
         */
        post: operations["post-tickets-id-viewers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tickets/{ticketId}/viewers/{viewerId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
                /** @description 共有ユーザーのUUID */
                viewerId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 共有ユーザーを削除
         * @description チケットの共有ユーザーを削除します。
         */
        delete: operations["delete-tickets-id-viewers-viewerId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tickets/{ticketId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        /**
         * コメントの一覧を取得
         * @description チケットのコメント一覧を取得します。
         */
        get: operations["get-tickets-id-comments"];
        put?: never;
        /**
         * コメントを投稿
         * @description チケットにコメントを投稿します。
         */
        post: operations["post-tickets-id-comments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tickets/{ticketId}/comments/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
                /** @description コメントのUUID */
                commentId: string;
            };
            cookie?: never;
        };
        /**
         * コメントを取得
         * @description チケットのコメントを取得します。
         */
        get: operations["get-tickets-id-comments-commentId"];
        put?: never;
        post?: never;
        /**
         * コメントを削除
         * @description チケットのコメントを削除します。
         */
        delete: operations["delete-tickets-id-comments-commentId"];
        options?: never;
        head?: never;
        /**
         * コメントを更新
         * @description チケットのコメントを更新します。添付ファイルは更新できません。
         */
        patch: operations["patch-tickets-id-comments-commentId"];
        trace?: never;
    };
    "/v1/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 現在のユーザーを取得
         * @description 現在のユーザーを取得します。
         */
        get: operations["get-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ユーザー一覧を取得
         * @description ユーザー一覧を取得します。
         */
        get: operations["get-users"];
        put?: never;
        /**
         * ユーザーを作成（招待）
         * @description ユーザーを作成します。
         *     作成されたユーザーは招待済みステータスとなり、招待メールが送信されます。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。
         */
        post: operations["post-users"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        /**
         * ユーザーを取得
         * @description ユーザーを一件取得します。
         */
        get: operations["get-users-userId"];
        put?: never;
        post?: never;
        /**
         * ユーザーを削除
         * @description ユーザーを削除します（論理削除）。
         *     削除されたユーザーは削除済ステータスとなりますが、引き続きユーザー情報にアクセス可能です。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。
         */
        delete: operations["delete-users-userId"];
        options?: never;
        head?: never;
        /**
         * ユーザーを更新
         * @description ユーザーを更新します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。
         */
        patch: operations["patch-users-userId"];
        trace?: never;
    };
    "/v1/users/lookupByEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * メールアドレスからユーザーを取得
         * @description メールアドレスからユーザーを取得します（完全一致）
         *     ※メールアドレスはURLエンコードしたものを送ってください。
         */
        get: operations["get-users-lookupByEmail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{userId}/reinvite": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ユーザーを再招待
         * @description 削除されたユーザーを再び招待します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。
         */
        post: operations["post-users-userId-reinvite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{userId}/suspend": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ユーザーを一時停止
         * @description 有効なユーザーを一時停止します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。
         */
        post: operations["post-users-userId-suspend"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{userId}/reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ユーザーを再有効化
         * @description 一時停止中のユーザーを有効化します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。
         */
        post: operations["post-users-userId-reactivate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{userId}/teams": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        /**
         * ユーザーの所属チーム一覧を取得
         * @description ユーザーの所属チーム一覧を取得します。
         *
         *     このAPIの実行には、チームの管理権限が必要です。
         */
        get: operations["get-users-userId-teams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{userId}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        /**
         * ユーザーの管理者ロール一覧を取得
         * @description ユーザーの管理者ロール一覧を取得します。
         *
         *     このAPIの実行には、ロールの管理権限が必要です。
         */
        get: operations["get-users-userId-roles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/routes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 経路一覧を取得
         * @description 経路の一覧を取得します。ステータスやフォルダによる絞り込みが可能です。
         */
        get: operations["get-routes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/routes/{routeId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 経路のUUIDまたはコード */
                routeId: string;
            };
            cookie?: never;
        };
        /**
         * 経路を取得
         * @description 指定した経路を取得します。
         */
        get: operations["get-routes-routeId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workflows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ワークフロー一覧を取得
         * @description ワークフローの一覧を取得します。ステータスによる絞り込みが可能です。
         */
        get: operations["get-workflows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workflows/{workflowId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ワークフローのUUIDまたはコード */
                workflowId: string;
            };
            cookie?: never;
        };
        /**
         * ワークフローを取得
         * @description 指定したIDのワークフローを取得します。
         */
        get: operations["get-workflows-workflowId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/proxyApplicants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 代理申請一覧を取得
         * @description テナント内の代理申請の一覧を取得します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。
         */
        get: operations["get-proxyApplicants"];
        put?: never;
        /**
         * 代理申請を作成
         * @description 代理申請を新規作成します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。ただし、自分の代理申請の設定をすべてのユーザーに許可している場合、管理権限は不要です。
         */
        post: operations["post-proxyApplicants"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/proxyApplicants/{proxyApplicantId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 代理申請のUUID */
                proxyApplicantId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 代理申請を削除
         * @description 指定した代理申請を削除します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。ただし、自分の代理申請の設定をすべてのユーザーに許可している場合、管理権限は不要です。
         */
        delete: operations["delete-proxyApplicants-proxyApplicantId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/proxyApprovers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 代理承認一覧を取得
         * @description テナント内の代理承認の一覧を取得します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。
         */
        get: operations["get-proxyApprovers"];
        put?: never;
        /**
         * 代理承認を作成
         * @description 代理承認を新規作成します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。ただし、自分の代理承認の設定をすべてのユーザーに許可している場合、管理権限は不要です。
         */
        post: operations["post-proxyApprovers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/proxyApprovers/{proxyApproverId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 代理承認のUUID */
                proxyApproverId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 代理承認を削除
         * @description 指定した代理承認を削除します。
         *
         *     このAPIの実行には、ユーザーの管理権限が必要です。ただし、自分の代理承認の設定をすべてのユーザーに許可している場合、管理権限は不要です。
         */
        delete: operations["delete-proxyApprovers-proxyApproverId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 添付ファイルをアップロード
         * @description 添付ファイルをアップロードします。最大2MBまでのファイルをアップロード可能です。
         *
         *     注意：このAPIはエンタープライズプランのお客様のみ利用可能です。
         *
         *     注意：アップロードしたファイルはすみやかにチケット作成などで使用してください。チケットなどから参照されていないファイルは最短24時間経過後に自動的に削除されます。
         */
        post: operations["post-files"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/files/{signedId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 添付ファイルの署名済みID */
                signedId: string;
            };
            cookie?: never;
        };
        /**
         * 添付ファイルの情報を取得
         * @description 添付ファイルのAmazon S3上のURLを含む情報を取得します。
         *
         *     注意: このAPIが返すURLは、5分間で失効します。
         *
         *     注意: チケットに添付されていないファイルはURLを取得できません。先にチケットに添付してください。
         */
        get: operations["get-files-signedId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auditLogs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 監査ログ一覧を取得
         * @description 監査ログの一覧を取得します。
         */
        get: operations["get-audit-logs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Grade
         * @description 役職
         */
        grade: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description 名前 */
            name: string;
            /** @description レベル */
            level: number;
            /** @description コード */
            code: string | null;
            /**
             * @description デフォルトの役職かどうか
             * @default false
             */
            isDefault: boolean;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
        };
        /**
         * GradeCreateBody
         * @description 役職を作成するときのrequest body
         */
        gradeCreateBody: {
            /** @description 名前 */
            name: string;
            /** @description レベル */
            level: number;
            /** @description コード。未指定の場合、ランダムな英数字がセットされます。 */
            code?: string;
        };
        /**
         * GradeUpdateBody
         * @description 役職を更新するときのrequest body
         */
        gradeUpdateBody: {
            /** @description 名前 */
            name?: string;
            /** @description レベル */
            level?: number;
            /** @description コード。未指定の場合、ランダムな英数字がセットされます。 */
            code?: string;
        };
        /**
         * User
         * @description ユーザー
         */
        user: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /**
             * Format: email
             * @description メールアドレス
             */
            email: string;
            /** @description コード */
            code: string;
            /** @description 名 */
            firstName: string;
            /** @description 姓 */
            lastName: string;
            /** @description フルネーム */
            fullName: string;
            /** @description 社員番号 */
            employeeId?: string | null;
            /** @description ユーザー画像のURL。サイズごとに複数のURLを返します。 */
            image: {
                "100x100": string | null;
                "64x64": string | null;
                "32x32": string | null;
            };
            /**
             * @description ステータス
             * @enum {string}
             */
            status: "invited" | "activated" | "suspended" | "deactivated";
            /** @description ロケール（jaまたはen） */
            locale: string;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
            /**
             * Format: date-time
             * @description 削除日時
             */
            deactivatedAt?: string | null;
        };
        /**
         * UserDetail
         * @description ユーザー詳細
         */
        userDetail: components["schemas"]["user"];
        /**
         * ProxyApplicant
         * @description 代理申請
         */
        proxyApplicant: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
            user: components["schemas"]["user"];
            proxyUser: components["schemas"]["user"];
            /**
             * Format: date
             * @description 開始日
             */
            startsOn: string | null;
            /**
             * Format: date
             * @description 終了日
             */
            endsOn: string | null;
            /** @description 対象ワークフロー */
            workflows: components["schemas"]["workflow"][];
        };
        /**
         * ProxyApprover
         * @description 代理承認
         */
        proxyApprover: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
            user: components["schemas"]["user"];
            proxyUser: components["schemas"]["user"];
            /**
             * Format: date
             * @description 開始日
             */
            startsOn: string | null;
            /**
             * Format: date
             * @description 終了日
             */
            endsOn: string | null;
            /** @description 対象ワークフロー */
            workflows: components["schemas"]["workflow"][];
        };
        /**
         * Team
         * @description チーム
         */
        team: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description 名前 */
            name: string;
            /** @description 上位組織を含む名前 */
            fullName: string;
            /** @description コード */
            code: string;
            /** @description 承認専用チームかどうか */
            approveOnly: boolean;
            /** @description ユーザー数 */
            usersCount: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
        };
        /**
         * TeamDetail
         * @description チームの詳細
         */
        teamDetail: components["schemas"]["team"] & {
            /** @description 親チーム */
            parent?: components["schemas"]["team"] | unknown;
            /** @description 子チーム */
            children: components["schemas"]["team"][];
            /** @description メンバーの配列。
             *
             *     注意：パフォーマンス上の理由から、100件を超えるメンバーを返すことはできません。101件以上のメンバーをすべて取得したい場合は、別途メンバー取得APIを呼び出してください。 */
            users: components["schemas"]["memberUser"][];
        };
        /**
         * TeamCreateBody
         * @description チームを作成するときのrequest body
         */
        teamCreateBody: {
            /** @description 名前 */
            name: string;
            /** @description コード。未指定の場合、ランダムな英数字がセットされます。 */
            code?: string;
            /**
             * Format: uuid
             * @description 親チームのUUID。nullの場合、作成したチームはルートになります。
             */
            parentId?: string;
            /** @description 承認専用チームかどうか */
            approveOnly?: boolean;
        };
        /**
         * TeamUpdateBody
         * @description チームを更新するときのrequest body
         */
        teamUpdateBody: {
            /** @description 名前 */
            name?: string;
            /** @description コード。未指定の場合、ランダムな英数字がセットされます。 */
            code?: string;
            /**
             * Format: uuid
             * @description 親チームのID
             */
            parentId?: string;
            /** @description 承認専用チームかどうか */
            approveOnly?: boolean;
        };
        /**
         * OrganizationChart
         * @description 組織図
         */
        organizationChart: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description 名前 */
            name: string;
            /** @description 現在有効な組織図かどうか */
            current: boolean;
            /** @description チーム数 */
            teamsCount: number;
            /** @description 所属数 */
            membershipsCount: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
            /** @description 有効化の予定 */
            activationPlan: {
                /** @description UUID */
                id: string;
                /**
                 * Format: date
                 * @description 有効化の予定日
                 */
                dueOn: string;
                /**
                 * Format: date-time
                 * @description 作成日時
                 */
                createdAt: string;
                /**
                 * Format: date-time
                 * @description 更新日時
                 */
                updatedAt: string;
            } | null;
        };
        /**
         * OrganizationChartDetail
         * @description 組織図の詳細
         */
        organizationChartDetail: components["schemas"]["organizationChart"];
        /**
         * OrganizationChartBody
         * @description 組織図を作成・更新するときのrequest body
         */
        organizationChartBody: {
            /** @description 名前 */
            name: string;
        };
        /**
         * MemberUser
         * @description チームの所属メンバー
         */
        memberUser: {
            /** @description 役職 */
            grades: components["schemas"]["grade"][];
            /** @description 上長かどうか */
            leader: boolean;
        } & components["schemas"]["user"];
        /**
         * Role
         * @description 管理者ロール
         */
        role: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description 名前 */
            name: string;
            /** @description 編集可能かどうか。「すべての管理者」のときだけfalseになります。 */
            editable: boolean;
            /** @description この管理者ロールに所属するユーザー数 */
            usersCount: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
        };
        /**
         * RoleDetail
         * @description 管理者ロールの詳細
         */
        roleDetail: components["schemas"]["role"] & {
            /** @description 権限のリスト */
            permissionList: {
                /**
                 * @description 権限タイプ
                 * @enum {string}
                 */
                permission: "tenant" | "billing" | "integration" | "security" | "audit" | "stats" | "workflow" | "route" | "pipeline" | "workflow_misc" | "user" | "team" | "role" | "master" | "ticket_read" | "ticket_write" | "label" | "automation";
                /** @description 管理対象が制限されている場合true */
                restricted: boolean;
                /** @description 管理対象のフォルダ */
                folders: components["schemas"]["folder"][];
                /** @description 管理対象の汎用マスタ */
                generalMasters: components["schemas"]["generalMaster"][];
                /** @description 管理対象のチーム */
                teams: components["schemas"]["team"][];
            }[];
        };
        /**
         * RoleCreateBody
         * @description 管理者ロールを作成するときのrequest body
         */
        roleCreateBody: {
            /** @description 名前 */
            name: string;
            /** @description 権限リスト */
            permissionList: {
                /**
                 * @description 権限タイプ
                 * @enum {string}
                 */
                permission: "tenant" | "billing" | "integration" | "security" | "audit" | "stats" | "workflow" | "route" | "pipeline" | "workflow_misc" | "user" | "team" | "role" | "master" | "ticket_read" | "ticket_write" | "label" | "automation";
                /** @description 管理対象を制限する場合true */
                restricted: boolean;
                /** @description 管理対象のフォルダID */
                folderIds?: string[];
                /** @description 管理対象の汎用マスタID */
                generalMasterIds?: string[];
                /** @description 管理対象のチームID */
                teamIds?: string[];
            }[];
        };
        /**
         * RoleUpdateBody
         * @description 管理者ロールを更新するときのrequest body
         */
        roleUpdateBody: {
            /** @description 名前 */
            name?: string;
            /** @description 権限リスト */
            permissionList?: {
                /**
                 * @description 権限タイプ
                 * @enum {string}
                 */
                permission: "tenant" | "billing" | "integration" | "security" | "audit" | "stats" | "workflow" | "route" | "pipeline" | "workflow_misc" | "user" | "team" | "role" | "master" | "ticket_read" | "ticket_write" | "label" | "automation";
                /** @description 管理対象を制限する場合true */
                restricted: boolean;
                /** @description 管理対象のフォルダID */
                folderIds?: string[];
                /** @description 管理対象の汎用マスタID */
                generalMasterIds?: string[];
                /** @description 管理対象のチームID */
                teamIds?: string[];
            }[];
        };
        /**
         * Category
         * @description カテゴリ
         */
        category: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description 名前 */
            name: string;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
        };
        /**
         * Folder
         * @description フォルダ
         */
        folder: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description 名前 */
            name: string;
            /** @description コード */
            code: string;
            /** @description 説明 */
            description?: string | null;
            /** @description フォルダ内のワークフロー数 */
            workflowsCount: number;
            /** @description フォルダ内の経路数 */
            routesCount: number;
            /** @description フォルダ内のパイプライン数 */
            pipelinesCount: number;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
        };
        /**
         * FolderDetail
         * @description フォルダの詳細
         */
        folderDetail: components["schemas"]["folder"] & {
            /** @description 親フォルダからルートフォルダまでの配列 */
            ancestors?: components["schemas"]["folder"][];
            /** @description 子フォルダ */
            children?: components["schemas"]["folder"][];
        };
        /**
         * GeneralMaster
         * @description 汎用マスタ
         */
        generalMaster: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description コード */
            code: string;
            /** @description 名前 */
            name: string;
            /** @description 説明 */
            description: string | null;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
            /** @description カスタムフィールドの配列 */
            fields: components["schemas"]["generalMasterField"][];
        };
        /**
         * GeneralMasterItem
         * @description 汎用マスタのアイテム
         */
        generalMasterItem: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description コード */
            code: string;
            /** @description 名前 */
            name: string;
            /** @description 説明 */
            description: string | null;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
            /**
             * Format: date
             * @description 有効期限の開始日
             */
            startsOn: string | null;
            /**
             * Format: date
             * @description 有効期限の終了日
             */
            endsOn: string | null;
            /** @description カスタムフィールドの入力の配列 */
            inputs: {
                /**
                 * Format: uuid
                 * @description UUID
                 */
                id: string;
                /** @description 入力値 */
                value: (string | null) | string[];
                /**
                 * Format: date-time
                 * @description 作成日時
                 */
                createdAt: string;
                /**
                 * Format: date-time
                 * @description 更新日時
                 */
                updatedAt: string;
                field: components["schemas"]["generalMasterField"];
            }[];
        };
        /**
         * GeneralMasterField
         * @description 汎用マスタのカスタムフィールド
         */
        generalMasterField: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description フィールド名 */
            title: string;
            /** @description フィールドの説明 */
            description: string | null;
            /** @description フィールドのコード */
            code: string;
            /**
             * @description フィールドの型
             * @enum {string}
             */
            fieldType: "text" | "text_long" | "number" | "integer" | "checkbox" | "pull_down" | "date";
            /** @description 必須項目かどうか */
            required: boolean;
            /** @description 管理者以外も閲覧可能な場合true */
            visible: boolean;
            /** @description 選択肢。fieldTypeがcheckboxまたはpull_downのときのみ。 */
            options: string[] | null;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
        };
        /**
         * Workflow
         * @description ワークフロー
         */
        workflow: {
            /** @description UUID */
            id: string;
            /** @description コード */
            code: string;
            /** @description バージョンのUUID */
            versionId: string;
            /** @description バージョン番号 */
            versionNumber: number;
            /** @description 名前 */
            name: string;
            /** @description 説明 */
            description: string;
            /**
             * @description ステータス。visibleは有効、invisibleは無効、deletedは削除済み。
             * @enum {string}
             */
            status: "visible" | "invisible" | "deleted";
            /**
             * @description チケットがテナント全体に共有される場合true
             * @default false
             */
            publicTicket: boolean;
            /**
             * @description 申請者の上長を共有ユーザーに追加するか。noneは追加しない、directは直属の上長のみ、allはすべての上長を表す。
             * @enum {string}
             */
            visibleToManager: "none" | "direct" | "all";
            /**
             * @description 申請チームのメンバーが共有ユーザーに追加される場合true
             * @default false
             */
            visibleToTeamMembers: boolean;
            /** @description タイトルの説明 */
            titleDescription: string | null;
            /** @description チケット番号のフォーマット */
            ticketNumberFormat: string | null;
            /** @description 承認者による上書きが可能な場合true */
            overwritable: boolean;
            /** @description 作成日時 */
            createdAt: string;
            /** @description 更新日時 */
            updatedAt: string;
            /**
             * @description タイトル入力モード
             * @enum {string}
             */
            titleInputMode: "none" | "input" | "calculate";
            /** @description タイトルの計算式 */
            titleFormula: string | null;
            /**
             * @description 共有ユーザーの編集が可能な場合true
             * @default true
             */
            allowEditingOfViewers: boolean;
            /** @description 作成者 */
            author: (components["schemas"]["user"] | unknown) | null;
            /** @description バージョン作成者 */
            versionAuthor: (components["schemas"]["user"] | unknown) | null;
            /** @description フォルダ */
            folder: components["schemas"]["folder"];
            /** @description カテゴリの配列 */
            categories: components["schemas"]["category"][];
        };
        /**
         * WorkflowInTicket
         * @description チケットに含まれるワークフロー。セクション情報と共有ユーザー情報を含みます。
         */
        workflowInTicket: components["schemas"]["workflow"] & {
            /** @description セクション・明細を表すオブジェクトを画面に表示される順に格納した配列。 */
            sectionList?: components["schemas"]["sectionListItem"][];
            /** @description ワークフロー単位のチケット共有ユーザー */
            ticketViewers: components["schemas"]["workflowTicketViewer"][];
            /** @description クラウドサイン連携設定 */
            cloudSignSetting: {
                /** @description 書類の添付が必須な場合true */
                required: boolean;
            } | unknown;
        };
        /**
         * WorkflowDetail
         * @description ワークフローの詳細
         */
        workflowDetail: components["schemas"]["workflowInTicket"] & {
            /** @description 経路分岐 */
            routeConditions: components["schemas"]["workflowRouteCondition"][];
        };
        /**
         * SectionListItem
         * @description 明細セクションまたはフォームセクション
         */
        sectionListItem: {
            /** @enum {string} */
            sectionType: "form" | "slip";
            /** @description タイトル */
            title: string | null;
            /** @description 説明 */
            description: string | null;
            /**
             * Format: uuid
             * @description フォームセクションのID（UUID）。明細セクションには含まれません。
             */
            id?: string;
            /** @description フォームフィールド。明細セクションには含まれません。 */
            formFields?: components["schemas"]["formFieldDetail"][];
            /** @description 表示条件があるかどうか。明細セクションには含まれません。 */
            conditional?: boolean;
            /** @description 条件をすべて満たす必要があるかどうか。明細セクションには含まれません。 */
            conditionAllOf?: boolean;
            /** @description 明細フィールド。フォームセクションには含まれません。 */
            slipFields?: components["schemas"]["slipFieldDetail"][];
        };
        /**
         * FormField
         * @description フォームフィールド
         */
        formField: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description 説明文 */
            title: string;
            /** @description 説明文 */
            description: string | null;
            /**
             * @description フィールドの型
             * @enum {string}
             */
            fieldType: "text" | "text_long" | "number" | "integer" | "checkbox" | "pull_down" | "date" | "file" | "master" | "user" | "team" | "ticket" | "calculation" | "button_api" | "button_kintone";
            /** @description 必須項目かどうか */
            required: boolean;
            /** @description 承認者が編集可能かどうか */
            approver: boolean;
            /** @description 申請者が編集可能かどうか */
            author?: boolean;
            /** @description 選択肢のリスト。型がcheckboxまたはpull_downのときのみ値が入ります。 */
            options: string[] | null;
            /** @description コード */
            code: string;
            /**
             * @description フォームサイズ。fullの場合全幅、halfの場合1/2になります。
             * @enum {string}
             */
            size: "full" | "half";
            /** @description 正規表現フォーマット */
            regexpFormat: string | null;
            /** @description 計算式。
             *     型がcalculationのときのみ値が入ります。 */
            formula: string | null;
            /** @description 初期値 */
            defaultValue: string | null;
            /** @description 最小値 */
            minValue: number | null;
            /** @description 最大値 */
            maxValue: number | null;
            /** @description 最小文字数 */
            minLength: number | null;
            /** @description 最大文字数 */
            maxLength: number | null;
            /** @description 小数の桁数 */
            decimalDigit: number | null;
            /** @description カンマ区切りで表示する場合true。
             *     整数、数値、自動計算フィールド以外ではnullが入ります。 */
            delimited: boolean | null;
            /** @description 単位（接頭辞） */
            prefix: string | null;
            /** @description 単位（接尾辞） */
            suffix: string | null;
            /** @description 隠しフィールドである場合true */
            hidden?: boolean | null;
            /** @description trueの時、申請者・承認者が画面上から値を入力することを禁止します。
             *     外部API連携（ボタン）による代入や、REST API経由での入力はこのオプションの対象外です。 */
            readonlyOnUi?: boolean | null;
        };
        /**
         * FormFieldDetail
         * @description フォームフィールドの詳細
         */
        formFieldDetail: components["schemas"]["formField"] & {
            /** @description 汎用マスタ（汎用マスタフィールドの場合） */
            generalMaster?: components["schemas"]["generalMaster"] | unknown;
            /** @description 初期値（汎用マスタフィールドの場合） */
            defaultGeneralMasterItem?: (components["schemas"]["generalMasterItem"] | unknown) | null;
            /** @description 外部API設定。fieldTypeがbutton_apiのときのみ値が入ります。 */
            externalApiSetting?: (components["schemas"]["externalApiSetting"] | unknown) | null;
            /** @description 外部API設定。fieldTypeがbutton_kintoneのときのみ値が入ります。 */
            kintoneAppSetting?: (components["schemas"]["kintoneAppSetting"] | unknown) | null;
            /** @description ClimberCloud連携設定。fieldTypeがfileのときのみ値が入ります。 */
            climberCloudSetting?: (components["schemas"]["climberCloudSetting"] | unknown) | null;
        };
        /**
         * ExternalApiSetting
         * @description 外部API設定
         */
        externalApiSetting: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /**
             * @description HTTPメソッド
             * @enum {string}
             */
            httpMethod: "get" | "post" | "put" | "delete" | "patch";
            /**
             * Format: uri
             * @description URL
             */
            url: string;
            /** @description リクエストヘッダー */
            headers: {
                /** @description ヘッダーのキー */
                key: string;
                /** @description ヘッダーの値 */
                value: string;
            }[];
            /** @description レスポンスが複数レコードを含む場合true */
            responseArray: boolean;
            /** @description 複数レコードを含む場合の配列へのJSONPath */
            arrayJsonPath: string | null;
            /** @description フィールドへのマッピング設定 */
            mappings: {
                formField: components["schemas"]["formField"];
                /** @description 値抽出用のJSONPath */
                jsonPath: string;
                /** @description 選択用テーブルで表示する場合true */
                displayInTable: boolean;
                /** @description 選択用テーブルでのタイトル */
                title: string | null;
            }[];
        };
        /**
         * climberCloudSetting
         * @description ClimberCloud連携設定
         */
        climberCloudSetting: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description ファイル付きリストID */
            contentsId?: string;
            formField?: components["schemas"]["formField"];
            /** @description ClimberCloudのカラムとのマッピング設定 */
            mappings: {
                formField: components["schemas"]["formField"];
                /** @description 表示順（1から始まります） */
                order: number;
            }[];
        };
        /**
         * SlipField
         * @description 明細フィールド
         */
        slipField: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /**
             * @description フィールドの型
             * @enum {string}
             */
            fieldType: "text" | "number" | "integer" | "calculation" | "pull_down" | "checkbox" | "date" | "file" | "master" | "user" | "team" | "ticket";
            /** @description フィールドのコード */
            code: string;
            /** @description タイトル */
            title: string;
            /** @description 入力必須の場合true */
            required: boolean;
            /** @description 列の合計を表示する場合true */
            showTotal: boolean;
            /** @description 選択肢。プルダウンまたはチェックボックスのときのみ値が入ります。 */
            options: string[];
            /** @description 正規表現フォーマット */
            regexpFormat: string | null;
            /** @description 計算式。型が自動計算のときのみ値が入ります。 */
            formula: string | null;
            /** @description 最大値 */
            maxValue: number | null;
            /** @description 最小値 */
            minValue: number | null;
            /** @description 初期値 */
            defaultValue: string | null;
            /** @description 小数の桁数 */
            decimalDigit: number | null;
            /** @description カンマ区切りで表示する場合true。
             *     整数、数値、自動計算フィールド以外ではnullが入ります。 */
            delimited: boolean | null;
            /** @description 添付可能な拡張子リスト */
            allowedExtensions: string[];
            /** @description 単位（接頭辞） */
            prefix: string | null;
            /** @description 単位（接尾辞） */
            suffix: string | null;
            /** @description 承認者が編集可能かどうか */
            approver: boolean;
            /** @description 申請者が編集可能かどうか */
            author?: boolean;
            /** @description 隠しフィールドである場合true */
            hidden?: boolean | null;
            /** @description trueの時、申請者・承認者が画面上から値を入力することを禁止します。
             *     外部API連携（ボタン）による代入や、REST API経由での入力はこのオプションの対象外です。 */
            readonlyOnUi?: boolean | null;
        };
        /**
         * SlipFieldDetail
         * @description 明細フィールドの詳細
         */
        slipFieldDetail: components["schemas"]["slipField"] & {
            /** @description 汎用マスタ。型が汎用マスタのときのみ値が入ります。 */
            generalMaster?: (components["schemas"]["generalMaster"] | unknown) | null;
            /** @description 汎用マスタアイテムの初期値 */
            defaultGeneralMasterItem?: (components["schemas"]["generalMasterItem"] | unknown) | null;
        };
        /**
         * WorkflowRouteCondition
         * @description ワークフローの経路分岐
         */
        workflowRouteCondition: {
            /** @description UUID */
            id: string;
            /**
             * @description 経路分岐タイプ
             * @enum {string}
             */
            conditionType: "always" | "field" | "field_otherwise";
            /**
             * @description 条件の組み合わせタイプ
             * @enum {string}
             */
            combinationType: "all" | "any" | "custom";
            /** @description 高度な条件式 */
            combinationExpression: string;
            /** @description 経路。routeまたはerrorMessageは片方のみ値が入ります。 */
            route: components["schemas"]["route"] | null;
            /** @description 条件 */
            conditionFields: components["schemas"]["workflowRouteConditionField"][];
            /** @description 申請拒否時のエラーメッセージ。routeまたはerrorMessageは片方のみ値が入ります。 */
            errorMessage: string | null;
        };
        /**
         * workflowRouteConditionField
         * @description ワークフロー経路分岐の条件
         */
        workflowRouteConditionField: {
            /** @description UUID */
            id: string;
            /** @description 演算子 */
            symbol: string;
            /** @description しきい値 */
            value: string | null;
            /** @description 対象のフォームフィールド */
            formField: components["schemas"]["formField"];
            /** @description しきい値として使う役職 */
            grade: components["schemas"]["grade"] | null;
            /** @description しきい値として使うチーム */
            team: components["schemas"]["team"] | null;
            /** @description しきい値として使う汎用マスタアイテム */
            generalMasterItem: components["schemas"]["generalMasterItem"] | null;
        };
        /**
         * WorkflowTicketViewer
         * @description ワークフロー単位で設定された共有ユーザー
         */
        workflowTicketViewer: {
            /** @description UUID */
            id: string;
            /** @description ユーザー。ユーザーとチームは片方のみ値が入ります。 */
            user: components["schemas"]["user"] | null;
            /** @description チーム。ユーザーとチームは片方のみ値が入ります。 */
            team: components["schemas"]["team"] | null;
            /** @description 役職。チーム指定で役職も指定する場合のみ値が入ります。 */
            grade: components["schemas"]["grade"] | null;
        };
        /**
         * Route
         * @description 経路
         */
        route: {
            /** @description UUID */
            id: string;
            /** @description コード */
            code: string;
            /**
             * @description ステータス
             * @enum {string}
             */
            status: "visible" | "deleted" | "error";
            /** @description バージョンのID */
            versionId: string;
            /** @description バージョン番号 */
            versionNumber: number;
            /** @description 名前 */
            name: string;
            /** @description 説明文 */
            description: string;
            /** @description 作成日時 */
            createdAt: string;
            /** @description 更新日時 */
            updatedAt: string;
            /** @description 作成者 */
            author?: (components["schemas"]["user"] | unknown) | null;
            versionAuthor?: components["schemas"]["user"] | unknown;
            /** @description フォルダ */
            folder: components["schemas"]["folder"];
        };
        /**
         * RouteDetail
         * @description 経路の詳細情報
         */
        routeDetail: components["schemas"]["route"] & {
            /** @description 経路ステップ */
            steps: components["schemas"]["routeStep"][];
        };
        /**
         * RouteStep
         * @description 経路ステップ
         */
        routeStep: {
            /** @description UUID */
            id: string;
            /** @description ステップ順序（1から始まります） */
            stepOrder: number;
            /**
             * @description ステップのタイプ
             * @enum {string}
             */
            stepType: "author" | "manager" | "team" | "user" | "author_customizable" | "assignee_customizable" | "dynamic_team";
            /** @description タイトル */
            title: string;
            /**
             * @description アクションタイプ。承認/差し戻しの場合approve、回覧（確認あり）の場合confirm、回覧（確認なし）の場合noneになります。
             * @enum {string}
             */
            actionType: "approve" | "confirm" | "none";
            /** @description 承認者への指示 */
            instruction: string | null;
            /** @description 必要な承認人数 */
            requiredApprovalsNumber: number;
            /** @description 必要な承認割合（%） */
            requiredApprovalsPercent: number;
            /**
             * @description フォールバックのタイプ
             * @enum {string|null}
             */
            fallbackType: "direct_manager" | "higher_manager" | "skip" | null;
            /** @description 自己承認を許可するか */
            allowSelfApproval: boolean;
            /** @description 最小指名人数。「申請者が指名」ステップのみ設定可能。 */
            minCustomAssignees: number | null;
            /** @description 承認者の選び方 */
            approverAssignmentInstruction: string | null;
            /** @description 承認者の指定に使うユーザーの配列 */
            users: components["schemas"]["user"][];
            /** @description 承認者の指定に使うチームと役職の条件 */
            targets?: components["schemas"]["routeStepTarget"][];
            routeStepCondition?: components["schemas"]["routeStepCondition"] | unknown;
            /** @description コード */
            code: string;
        };
        /** RouteStepTarget */
        routeStepTarget: {
            team?: components["schemas"]["team"];
            /** @description stepType=author_customizableまたはstepType=assignee_customizableの場合に、指定したチームの下位チームのメンバーも承認者候補に含めるかどうか（true: 含める、false: 含めない） */
            descendants?: boolean;
            /** @description 役職の比較条件。役職が指定されているときのみ値が入ります。 */
            gradeSymbol?: string;
            /** @description 承認者の指定に使う役職の配列 */
            grades?: components["schemas"]["grade"][];
            /** @description 承認者タイプ「チームを動的に指定」で指定する変数名が入ります。 */
            variable?: string;
        };
        /**
         * RouteStepCondition
         * @description ステップごとに設定できる実行条件
         */
        routeStepCondition: {
            /**
             * Format: uuid
             * @description UUID
             */
            id?: string;
            /**
             * @description 実行タイプ
             * @enum {string}
             */
            conditionType?: "always" | "conditional" | "conditional_skip";
            /**
             * @description 条件の組み合わせタイプ
             * @enum {string}
             */
            combinationType?: "all" | "any";
            routeStepConditionFields?: components["schemas"]["routeStepConditionField"] | unknown;
        };
        /**
         * RouteStepConditionField
         * @description ステップごとに設定できる実行条件の詳細
         */
        routeStepConditionField: {
            /**
             * Format: uuid
             * @description UUID
             */
            id?: string;
            /** @description 変数 */
            variable?: string;
            /**
             * @description 変数のフィールド
             * @enum {string}
             */
            fieldKey?: "author_grade" | "author_team" | "text_variable" | "number_variable" | "checkbox_variable" | "general_master_variable" | "other_variable";
            /** @description 演算子 */
            symbol?: string;
            /** @description しきい値 */
            value?: string;
            /** @description しきい値として使う役職 */
            grade?: components["schemas"]["grade"];
            /** @description しきい値として使うチーム */
            team?: components["schemas"]["team"];
            /** @description しきい値として使う汎用マスタアイテム */
            generalMasterItem?: components["schemas"]["generalMasterItem"];
        };
        /**
         * Ticket
         * @description チケット
         */
        ticket: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description チケット番号 */
            ticketNumber: string;
            /** @description タイトル */
            title?: string | null;
            /**
             * @description ステータス
             * @enum {string}
             */
            status: "draft" | "in_progress" | "completed" | "rejected" | "archived" | "denied";
            /** @description サブステータス。処理中のみ値が入ります。 */
            subStatus?: (components["schemas"]["subStatus"] | unknown) | null;
            /** @description 現在のステップ。0が起票者、1が最初の承認ステップ。 */
            currentStep: number;
            /** @description 申請者。代理申請の場合、代理人が入ります。 */
            author: components["schemas"]["user"];
            /** @description 代理申請を依頼したユーザー。代理申請の場合のみ値が入ります。 */
            proxyClientUser: (components["schemas"]["user"] | unknown) | null;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 申請日時
             */
            openedAt: string | null;
            /**
             * Format: date-time
             * @description 完了日時
             */
            completedAt: string | null;
            /**
             * Format: date-time
             * @description アーカイブ日時
             */
            archivedAt: string | null;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
            /** @description チケットがテナント全体に共有の場合true */
            publicStatus: boolean;
            /**
             * @description チケットの共有範囲の上書き設定
             * @enum {string}
             */
            forcedPublicType: "follow_workflow" | "forced_public" | "forced_private";
            /** @description このチケットのワークフロー情報。チケットを一件だけ取得した場合のみ、セクションや共有ユーザーを含むより詳細なワークフロー情報が入ります。 */
            workflow: components["schemas"]["workflow"] | components["schemas"]["workflowInTicket"];
            /** @description チケットのラベルの配列 */
            labels: components["schemas"]["label"][];
        };
        ticketWithStep: components["schemas"]["ticket"] & {
            /** @description ステップの配列 */
            steps: components["schemas"]["ticketStep"][];
        };
        /**
         * TicketDetail
         * @description チケットの詳細
         */
        ticketDetail: components["schemas"]["ticket"] & {
            /** @description 申請者の所属チーム */
            authorTeam: components["schemas"]["team"] | unknown;
            /** @description このチケットの承認経路。申請拒否状態の場合、nullになります。 */
            route: components["schemas"]["routeDetail"] | null;
            /** @description 元のチケット（パイプラインで作成されたときのみ値が入ります） */
            triggerTicket?: components["schemas"]["ticket"] | unknown;
            /** @description 次のチケット（パイプラインで次のチケットを作成したときのみ値が入ります） */
            nextTickets?: components["schemas"]["ticket"][];
            /** @description 明細の入力 */
            slipItems: components["schemas"]["slipItem"][];
            /** @description セクションの配列 */
            ticketSections: components["schemas"]["ticketSection"][];
            /** @description フォームの入力 */
            inputs: components["schemas"]["ticketInput"][];
            /** @description 添付されたクラウドサインの書類 */
            cloudSignDocument: unknown | {
                /**
                 * Format: uuid
                 * @description UUID
                 */
                id: string;
                /** @description クラウドサイン書類のID */
                documentId: string;
                /** @description クラウドサイン書類のタイトル */
                documentTitle: string;
                /**
                 * @description クラウドサイン書類のステータス
                 * @enum {string}
                 */
                status: "draft" | "in_progress" | "rejected" | "template" | "imported" | "completed";
                /** @description クラウドサインがサンドボックス環境の場合true */
                sandbox: boolean;
                /**
                 * Format: date-time
                 * @description 作成日時
                 */
                createdAt: string;
                /**
                 * Format: date-time
                 * @description 更新日時
                 */
                updatedAt: string;
                /**
                 * Format: uri
                 * @description クラウドサイン書類のURL
                 */
                url: string;
            };
            /** @description チケットのステップ */
            steps: components["schemas"]["ticketStep"][];
        };
        /**
         * TicketInput
         * @description チケットのフォーム入力
         */
        ticketInput: {
            /** @description UUID */
            id: string;
            /** @description 入力値
             *     フィールドの型が汎用マスタアイテム、ユーザー、チーム、チケットの場合、JSON Arrayがキャッシュとして保存されます。 */
            value: (string | null) | (unknown[] | null) | (number | null) | (number | null);
            formField?: components["schemas"]["formField"];
            /** @description 入力値: 汎用マスタアイテム */
            generalMasterItems?: components["schemas"]["generalMasterItem"][];
            /** @description 入力値: ユーザー */
            users?: components["schemas"]["user"][];
            /** @description 入力値: チーム */
            teams?: components["schemas"]["team"][];
            /** @description 入力値: チケット */
            inputTickets?: components["schemas"]["ticket"][];
            /** @description 添付ファイル */
            attachments?: components["schemas"]["attachment"][];
        };
        /**
         * TicketSection
         * @description チケットのセクション
         */
        ticketSection: {
            /**
             * Format: uuid
             * @description ワークフローのセクションID
             */
            sectionId: string;
            /** @description セクションの表示状態 */
            visible: boolean;
            /** @description このセクションの入力の配列 */
            inputs: components["schemas"]["ticketInput"][];
        };
        /**
         * TicketStep
         * @description チケット承認ステップ
         */
        ticketStep: {
            /** @description UUID */
            id: string;
            /** @description 経路ステップのUUID。カスタムステップの場合、nullになります。 */
            routeStepId: string | null;
            /** @description ステップのタイトル */
            title: string | null;
            /**
             * @description アクションタイプ。承認/差し戻しの場合approve、回覧（確認あり）の場合confirm、回覧（確認なし）の場合noneになります。
             * @enum {string}
             */
            actionType: "approve" | "confirm" | "none";
            /** @description 必要な承認人数 */
            requiredApprovalsNumber: number;
            /** @description 必要な承認割合% */
            requiredApprovalsPercent: number;
            /** @description ステップの順序。最初の承認ステップが1。 */
            stepOrder: number;
            /** @description スキップ可能な場合true */
            skip: boolean;
            /** @description フォールバックした場合true */
            fallback: boolean;
            /**
             * @description フォールバックの結果
             * @enum {string|null}
             */
            fallbackResult: "direct_manager" | "higher_manager" | "skip" | null;
            /** @description 承認ステップの作成者。カスタムステップの場合のみ、値が入ります。 */
            author: (components["schemas"]["user"] | unknown) | null;
            /** @description 承認者 */
            assignees: components["schemas"]["ticketAssignee"][];
            /** @description ステップが完了している場合true */
            completed: boolean;
            /**
             * Format: date-time
             * @description ステップが完了した日時。過去のデータではnullを返します。
             */
            completedAt: string | null;
        };
        /**
         * TicketAssignee
         * @description チケット承認者
         */
        ticketAssignee: {
            /** @description UUID */
            id: string;
            /** @description ステップ番号。1が最初の承認ステップ。 */
            stepOrder: number;
            /** @description 現在の承認ステップの場合true */
            current: boolean;
            /** @description 承認済みの場合true */
            completed: boolean;
            /**
             * Format: date-time
             * @description 承認日時。古いデータではnullを返します。
             */
            completedAt: string | null;
            /** @description 承認を保留中の場合true */
            pending: boolean;
            user: components["schemas"]["user"];
        };
        /**
         * Attachment
         * @description 添付ファイル
         */
        attachment: {
            /** @description 署名済みID */
            signedId: string;
            /** @description ファイル名 */
            filename: string;
            /**
             * Format: uri
             * @description ファイルURL
             */
            url: string;
        };
        /**
         * SlipItem
         * @description 明細アイテム
         */
        slipItem: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description 明細アイテムの入力の配列 */
            inputs: components["schemas"]["slipItemInput"][];
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
            /**
             * Format: uuid
             * @description 明細セクションのUUID
             */
            slipSectionId: string;
        };
        /**
         * SlipItemInput
         * @description 明細アイテム入力
         */
        slipItemInput: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /**
             * Format: uuid
             * @description 明細フィールドのUUID
             */
            slipFieldId: string;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
            /** @description 入力値
             *
             *     フィールドの型が汎用マスタアイテムの場合、JSON Arrayがキャッシュとして保存されます。 */
            value: ((string | null) | (unknown[] | null) | (number | null) | (number | null)) | null;
            /** @description 入力値: 汎用マスタアイテム */
            generalMasterItems: components["schemas"]["generalMasterItem"][];
            /** @description 入力値: ユーザー */
            users?: components["schemas"]["user"][];
            /** @description 入力値: チーム */
            teams?: components["schemas"]["team"][];
            /** @description 入力値: チケット */
            inputTickets?: components["schemas"]["ticket"][];
            /** @description 添付ファイル */
            attachments: components["schemas"]["attachment"][];
        };
        /**
         * Label
         * @description ラベル
         */
        label: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description 名前 */
            name: string;
            /** @description 説明 */
            description: string | null;
            /** @description ラベルの色。#なしHEXコード（例: ff0000） */
            color: string;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
        };
        /**
         * SubStatus
         * @description サブステータス
         */
        subStatus: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description コード */
            code: string;
            /** @description 名前 */
            name: string;
            /** @description 説明 */
            notes: string | null;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
        };
        /**
         * TicketViewer
         * @description チケットの共有ユーザー
         */
        ticketViewer: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            user: (components["schemas"]["user"] | unknown) | null;
            team: (components["schemas"]["team"] | unknown) | null;
            grade: (components["schemas"]["grade"] | unknown) | null;
            /** @description 下位のチームを含めるかどうか */
            descendants: boolean;
        };
        /**
         * Comment
         * @description コメント
         */
        comment: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description 本文 */
            body: string;
            /** @description 添付ファイル */
            attachments: components["schemas"]["attachment"][];
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
            /**
             * Format: date-time
             * @description 削除日時
             */
            deletedAt: string | null;
            user: components["schemas"]["user"];
            /** @description メンションしたユーザーの配列 */
            mentionedUsers: components["schemas"]["user"][];
        };
        /**
         * AuditLog
         * @description 監査ログ
         */
        auditLog: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description 操作ユーザー。システムによる操作の場合はnull。 */
            user: (components["schemas"]["user"] | unknown) | null;
            /** @description 操作種別 */
            action: string;
            /** @description 操作データ */
            data: Record<string, never> | null;
            /** @description リモートIPアドレス */
            remoteIp: string | null;
            /** @description システムによる操作種別 */
            systemType: string | null;
            /**
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
        };
        /**
         * kintoneApp
         * @description kintone連携
         */
        kintoneApp: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            /** @description kintoneアプリ名 */
            name: string;
            /** @description kintoneドメイン */
            domain: string;
            /** @description kintoneアプリID */
            appId: string;
        };
        /**
         * kintoneAppSetting
         * @description kintone連携設定
         */
        kintoneAppSetting: {
            /**
             * Format: uuid
             * @description UUID
             */
            id: string;
            formField: components["schemas"]["formField"];
            kintoneApp: components["schemas"]["kintoneApp"];
            /** @description フィールドへのマッピング設定 */
            mappings: {
                /**
                 * Format: uuid
                 * @description UUID
                 */
                id: string;
                /** @description 選択用テーブルで表示する場合true */
                displayInTable: boolean;
                /** @description kintoneフィールドコード */
                kintoneFieldCode: string;
                /** @description kintoneフィールドコード */
                kintoneFieldName: string;
                /** @description kintoneフィールドコード */
                kintoneFieldType: string;
                formField: components["schemas"]["formField"];
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "get-categories": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description ソート。指定可能なフィールド: name, createdAt, updatedAt */
                sortBy?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["category"][];
                };
            };
        };
    };
    "post-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description 名前 */
                    name: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["category"];
                };
            };
        };
    };
    "delete-categories-categoryId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description カテゴリのUUID */
                categoryId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "patch-categories-categoryId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description カテゴリのUUID */
                categoryId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description 名前 */
                    name: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["category"];
                };
            };
        };
    };
    "get-folders": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description ソート。 指定可能なフィールド: createdAt, name, fullName */
                sortBy?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["folder"][];
                };
            };
        };
    };
    "post-folders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description 名前 */
                    name: string;
                    /** @description コード。未指定の場合、ランダムな英数字がセットされます。 */
                    code?: string;
                    /** @description フォルダの説明 */
                    description?: string;
                    /**
                     * Format: UUID
                     * @description 親フォルダのID
                     */
                    parentFolderId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["folderDetail"];
                };
            };
        };
    };
    "get-folders-folderId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description フォルダのUUIDまたはコード */
                folderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["folderDetail"];
                };
            };
        };
    };
    "delete-folders-folderId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description フォルダのUUIDまたはコード */
                folderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "patch-folders-folderId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description フォルダのUUIDまたはコード */
                folderId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description 名前 */
                    name?: string;
                    /** @description コード */
                    code?: string;
                    /** @description フォルダの説明 */
                    description?: string;
                    /**
                     * Format: UUID
                     * @description 親フォルダのID
                     */
                    parentFolderId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["folderDetail"];
                };
            };
        };
    };
    "get-generalMasters": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数å */
                perPage?: number;
                /** @description ソート。 指定可能なフィールド: createdAt, code, name */
                sortBy?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["generalMaster"][];
                };
            };
        };
    };
    "post-generalMasters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description 名前 */
                    name: string;
                    /** @description コード。未指定の場合、ランダムな英数字がセットされます。 */
                    code?: string | null;
                    /** @description 説明 */
                    description?: string | null;
                    /** @description カスタムフィールドの配列 */
                    fields?: {
                        /** @description フィールド名 */
                        title: string;
                        /** @description フィールドの説明 */
                        description?: string | null;
                        /** @description フィールドのコード */
                        code: string;
                        /** @description 入力必須かどうか */
                        required: boolean;
                        /**
                         * @description フィールドの型
                         * @enum {string}
                         */
                        fieldType: "text" | "text_long" | "number" | "integer" | "checkbox" | "pull_down" | "date";
                        /** @description 選択肢。fieldTypeがcheckboxまたはpull_downのとき必須。 */
                        options?: string[] | null;
                        /** @description 管理者以外も閲覧可能な場合true */
                        visible?: boolean;
                    }[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["generalMaster"];
                };
            };
        };
    };
    "get-generalMasters-generalMasterId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 汎用マスタのUUIDまたはコード */
                generalMasterId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["generalMaster"];
                };
            };
        };
    };
    "delete-generalMasters-generalMasterId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 汎用マスタのUUIDまたはコード */
                generalMasterId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "patch-generalMasters-generalMasterId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 汎用マスタのUUIDまたはコード */
                generalMasterId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description コード。未指定の場合、ランダムな英数字がセットされます。 */
                    code?: string;
                    /** @description 名前 */
                    name?: string;
                    /** @description 説明 */
                    description?: string;
                    /** @description カスタムフィールドの配列 */
                    fields?: {
                        /** @description フィールド名 */
                        title?: string;
                        /** @description フィールドの説明 */
                        description?: string | null;
                        /** @description フィールドのコード */
                        code: string;
                        /** @description 入力必須かどうか */
                        required?: boolean;
                        /** @description フィールドの型 */
                        fieldType?: string;
                        /** @description 選択肢。fieldTypeがcheckboxまたはpull_downのときのみ必須。 */
                        options?: string[] | null;
                        /** @description 管理者以外も閲覧可能な場合true */
                        visible?: boolean;
                    }[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["generalMaster"];
                };
            };
        };
    };
    "get-generalMasters-generalMasterId-items": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description ソート。 指定可能なフィールド: createdAt, code, name */
                sortBy?: string;
            };
            header?: never;
            path: {
                /** @description 汎用マスタのUUIDまたはコード */
                generalMasterId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["generalMasterItem"][];
                };
            };
        };
    };
    "post-generalMasters-generalMasterId-items": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 汎用マスタのUUIDまたはコード */
                generalMasterId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description コード。未指定の場合、ランダムな英数字がセットされます。 */
                    code?: string;
                    /** @description 名前 */
                    name: string;
                    /** @description 説明 */
                    description?: string;
                    /**
                     * Format: date
                     * @description 有効期限の開始日
                     */
                    startsOn?: string | null;
                    /**
                     * Format: date
                     * @description 有効期限の終了日
                     */
                    endsOn?: string | null;
                    /** @description カスタムフィールドの入力。必須ではないカスタムフィールドを含む、すべてのカスタムフィールドに対して入力する必要があります。 */
                    inputs: {
                        /** @description フィールドのコード */
                        code: string;
                        /** @description 入力値。カスタムフィールドがcheckboxまたはpull_downの場合は文字列の配列、それ以外は文字列。 */
                        value: (string | null) | string[];
                    }[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["generalMasterItem"];
                };
            };
        };
    };
    "get-generalMasters-generalMasterId-items-itemId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 汎用マスタのUUIDまたはコード */
                generalMasterId: string;
                /** @description 汎用マスタアイテムのUUIDまたはコード */
                itemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["generalMasterItem"];
                };
            };
        };
    };
    "delete-generalMasters-generalMasterId-items-itemId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 汎用マスタのUUIDまたはコード */
                generalMasterId: string;
                /** @description 汎用マスタアイテムのUUIDまたはコード */
                itemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "patch-generalMasters-generalMasterId-items-itemId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 汎用マスタのUUIDまたはコード */
                generalMasterId: string;
                /** @description 汎用マスタアイテムのUUIDまたはコード */
                itemId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description コード。未指定の場合、ランダムな英数字がセットされます。 */
                    code?: string;
                    /** @description 名前 */
                    name?: string;
                    /** @description 説明 */
                    description?: string;
                    /**
                     * Format: date
                     * @description 有効期限の開始日
                     */
                    startsOn?: string | null;
                    /**
                     * Format: date
                     * @description 有効期限の終了日
                     */
                    endsOn?: string | null;
                    /** @description カスタムフィールドの入力。必須ではないカスタムフィールドを含む、すべてのカスタムフィールドに対して入力する必要があります。 */
                    inputs?: {
                        /** @description フィールドのコード */
                        code: string;
                        /** @description 入力値。カスタムフィールドがcheckboxまたはpull_downの場合文字列の配列、それ以外の場合文字列。 */
                        value: (string | null) | string[];
                    }[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["generalMasterItem"];
                };
            };
        };
    };
    "get-grades": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description ソート。指定可能なフィールド: level, code */
                sortBy?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["grade"][];
                };
            };
        };
    };
    "post-grades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["gradeCreateBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["grade"];
                };
            };
        };
    };
    "get-grades-gradeId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 役職のUUIDまたはコード */
                gradeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["grade"];
                };
            };
        };
    };
    "delete-grades-gradeId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 役職のUUIDまたはコード */
                gradeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "patch-grades-gradeId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 役職のUUIDまたはコード */
                gradeId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["gradeUpdateBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["grade"];
                };
            };
        };
    };
    "post-grades-gradeId-default": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 役職のUUIDまたはコード */
                gradeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-organizationCharts": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description ソート。指定可能なフィールド: createdAt, name */
                sortBy?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["organizationChart"][];
                };
            };
        };
    };
    "post-organizationCharts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["organizationChartBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["organizationChartDetail"];
                };
            };
        };
    };
    "get-organizationCharts-organizationChartId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["organizationChartDetail"];
                };
            };
        };
    };
    "delete-organizationCharts-organizationChartId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "patch-organizationCharts-organizationChartId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["organizationChartBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["organizationChartDetail"];
                };
            };
        };
    };
    "get-organizationChart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["organizationChartDetail"];
                };
            };
        };
    };
    "post-organizationCharts-organizationChartId-activate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: date
                     * @description 有効化する日付。nullの場合、即時で有効化します。
                     */
                    dueOn?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["organizationChartDetail"];
                };
            };
        };
    };
    "get-organizationCharts-organizationChartId-teams": {
        parameters: {
            query?: {
                /** @description 親チームのUUID */
                parentId?: string;
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
            };
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team"][];
                };
            };
        };
    };
    "post-organizationCharts-organizationChartId-teams": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["teamCreateBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["teamDetail"];
                };
            };
        };
    };
    "get-teams-teamId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
                /** @description チームのUUIDまたはコード */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["teamDetail"];
                };
            };
        };
    };
    "delete-teams-teamId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
                /** @description チームのUUIDまたはコード */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "patch-teams-teamId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
                /** @description チームのUUIDまたはコード */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["teamUpdateBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["teamDetail"];
                };
            };
        };
    };
    "get-organizationCharts-organizationChartId-teams-teamId-memberships": {
        parameters: {
            query?: {
                /** @description ページ。1が先頭のページ。 */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
            };
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
                /** @description チームのUUIDまたはコード */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["memberUser"][];
                };
            };
        };
    };
    "post-teams-teamId-members": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
                /** @description チームのUUIDまたはコード */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description メンバーに追加したいユーザー情報の配列 */
                    users: {
                        /**
                         * Format: uuid
                         * @description ユーザーのUUID
                         */
                        id: string;
                        /** @description 上長の場合、true */
                        leader: boolean;
                        /** @description 役職のUUID */
                        gradeIds?: string[];
                    }[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "delete-teams-teamId-members": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
                /** @description チームのUUIDまたはコード */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description ユーザーのUUIDの配列 */
                    userIds: string[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "patch-teams-teamId-memberships-userId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 組織図のUUID */
                organizationChartId: string;
                /** @description チームのUUIDまたはコード */
                teamId: string;
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description 上長の場合、true */
                    leader: boolean;
                    /** @description 役職のUUID */
                    gradeIds: string[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-roles": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description ソート。 指定可能なフィールド: createdAt, name */
                sortBy?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["role"][];
                };
            };
        };
    };
    "post-roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["roleCreateBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["roleDetail"];
                };
            };
        };
    };
    "get-roles-roleId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 管理者ロールのUUID */
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["roleDetail"];
                };
            };
        };
    };
    "delete-roles-roleId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 管理者ロールのUUID */
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "patch-roles-roleId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 管理者ロールのUUID */
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["roleUpdateBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["roleDetail"];
                };
            };
        };
    };
    "get-roles-roleId-memberships": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
            };
            header?: never;
            path: {
                /** @description 管理者ロールのUUID */
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["user"][];
                };
            };
        };
    };
    "post-roles-roleId-memberships": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 管理者ロールのUUID */
                roleId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description ユーザーUUIDの配列 */
                    userIds: string[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "delete-roles-roleId-memberships-userId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 管理者ロールのUUID */
                roleId: string;
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-tickets": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description ソート。指定可能なフィールド: createdAt, updatedAt */
                sortBy?: string;
                /** @description ステータスの配列 */
                status?: ("draft" | "in_progress" | "rejected" | "completed" | "denied" | "archived") | ("draft" | "in_progress" | "rejected" | "completed" | "denied" | "archived")[];
                /** @description サブステータスのUUIDの配列 */
                subStatusIds?: string[];
                /** @description ワークフローのUUID */
                workflowId?: string;
                /** @description 申請者のUUID */
                authorId?: string;
                /** @description 申請時に選択したチームの上位組織を含む名前 */
                authorTeamFullName?: string;
                /** @description チケット番号 */
                ticketNumber?: string;
                /** @description 作成日時の起点 */
                createdAtStart?: string | unknown | unknown;
                /** @description 作成日時の終点 */
                createdAtEnd?: string | unknown | unknown;
                /** @description 更新日時の起点 */
                updatedAtStart?: string | unknown | unknown;
                /** @description 更新日時の終点 */
                updatedAtEnd?: string | unknown | unknown;
                /** @description 申請日時の起点 */
                openedAtStart?: string | unknown | unknown;
                /** @description 申請日時の終点 */
                openedAtEnd?: string | unknown | unknown;
                /** @description 完了日時の起点 */
                completedAtStart?: string | unknown | unknown;
                /** @description 完了日時の終点 */
                completedAtEnd?: string | unknown | unknown;
                /** @description アーカイブ日時の起点 */
                archivedAtStart?: string | unknown | unknown;
                /** @description アーカイブ日時の終点 */
                archivedAtEnd?: string | unknown | unknown;
                /** @description 承認者のUUID。assigneeStatusとセットで指定してください。 */
                assigneeUserId?: string;
                /** @description 承認者の状態。assigneeUserIdとセットで指定してください。 */
                assigneeStatus?: ("all" | "current" | "approved")[];
                /** @description 現在の承認ステップ名 */
                stepTitle?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticketWithStep"][];
                };
            };
        };
    };
    "post-tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description ステータス。作成ではdraftまたはin_progressのみ選択可能です。
                     * @enum {string}
                     */
                    status: "draft" | "in_progress";
                    /**
                     * Format: uuid
                     * @description ワークフローのUUID
                     */
                    workflowId: string;
                    /**
                     * Format: uuid
                     * @description 申請チームのUUID
                     */
                    authorTeamId: string;
                    /**
                     * Format: uuid
                     * @description 依頼者となるユーザーのUUID。代理申請の場合のみ指定してください。
                     */
                    proxyClientUserId?: string | null;
                    /** @description チケットのタイトル。ワークフローでtitleInputModeがinputのときのみ設定可能です。 */
                    title?: string | null;
                    /** @description 明細アイテムの配列。明細ワークフローの場合、このフィールドは必須です。 */
                    slipItems?: {
                        /**
                         * Format: uuid
                         * @description 明細セクションのUUID。
                         */
                        slipSectionId?: string | null;
                        /** @description 明細アイテム入力の配列 */
                        inputs: {
                            /**
                             * Format: uuid
                             * @description 明細フィールドのUUID。slipFieldIdまたはslipFieldCodeは片方のみ必須です。
                             */
                            slipFieldId?: string | null;
                            /** @description 明細フィールドのコード。slipFieldIdまたはslipFieldCodeは片方のみ必須です。 */
                            slipFieldCode?: string | null;
                            /** @description 入力値。フィールドがチェックボックスタイプのときは配列で指定してください。 */
                            value?: (string | null) | string[];
                            /** @description 汎用マスタアイテムのUUID。フィールドが汎用マスタタイプのときのみ指定してください。 */
                            generalMasterItemId?: (string | null) | string[];
                            /** @description ユーザーUUID。フィールドがユーザータイプのときのみ指定してください。 */
                            userId?: (string | null) | string[];
                            /** @description チームUUID。フィールドがチームタイプのときのみ指定してください。 */
                            teamId?: (string | null) | string[];
                            /** @description チケットUUID。フィールドがチケットタイプのときのみ指定してください。 */
                            ticketId?: (string | null) | string[];
                            /** @description 添付ファイルの署名済みID。
                             *     フィールドがファイルタイプのときのみ指定してください。 */
                            files?: string[] | null;
                        }[];
                    }[];
                    /** @description フォームの入力の配列。ワークフローのすべてのフォームフィールドに対応する入力を入れてください。 */
                    inputs: {
                        /**
                         * Format: uuid
                         * @description フォームフィールドのUUID。formFieldIdまたはformFieldCodeは片方のみ必須です。
                         */
                        formFieldId?: string | null;
                        /** @description フォームフィールドのUUID。formFieldIdまたはformFieldCodeは片方のみ必須です。 */
                        formFieldCode?: string | null;
                        /** @description 入力値。フィールドがチェックボックスタイプのときは配列で指定してください。 */
                        value?: (string | null) | string[];
                        /** @description 汎用マスタアイテムのUUID。フィールドが汎用マスタタイプのときのみ指定してください。 */
                        generalMasterItemId?: (string | null) | string[];
                        /** @description ユーザーUUID。フィールドがユーザータイプのときのみ指定してください。 */
                        userId?: (string | null) | string[];
                        /** @description チームUUID。フィールドがチームタイプのときのみ指定してください。 */
                        teamId?: (string | null) | string[];
                        /** @description チケットUUID。フィールドがチケットタイプのときのみ指定してください。 */
                        ticketId?: (string | null) | string[];
                        /** @description 添付ファイルの署名済みID。
                         *     フィールドがファイルタイプのときのみ指定してください。 */
                        files?: string[] | null;
                    }[];
                    /** @description クラウドサイン書類。ワークフローでクラウドサイン連携が有効な場合のみ指定してください。 */
                    cloudSignDocument?: {
                        /** @description クラウドサイン書類のID */
                        id: string;
                        /** @description クラウドサイン書類のタイトル */
                        title: string;
                        /** @description クラウドサインのサンドボックス環境の場合true */
                        sandbox: string;
                    };
                    /** @description 承認タイプが「申請者が指名」の経路ステップの承認者を指定する配列。 */
                    approvers?: {
                        /** @description 承認者を指定する経路ステップのコード */
                        routeStepCode: string;
                        /** @description 承認者として指定するユーザーのUUID */
                        userId: string[];
                    }[] | null;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticketDetail"];
                };
            };
        };
    };
    "get-tickets-tasks": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description ソート。指定可能なフィールド: createdAt, updatedAt */
                sortBy?: string;
                /** @description ステータスの配列 */
                status?: ("draft" | "in_progress" | "rejected" | "completed" | "deleted")[];
                /** @description サブステータスのUUIDの配列 */
                subStatusIds?: string[];
                /** @description ワークフローのUUID */
                workflowId?: string;
                /** @description 申請者のUUID */
                authorId?: string;
                /** @description 申請時に選択したチームの上位組織を含む名前 */
                authorTeamFullName?: string;
                /** @description チケット番号 */
                ticketNumber?: string;
                /** @description 作成日時の起点 */
                createdAtStart?: string;
                /** @description 作成日時の終点 */
                createdAtEnd?: string;
                /** @description 更新日時の起点 */
                updatedAtStart?: string;
                /** @description 更新日時の終点 */
                updatedAtEnd?: string;
                /** @description 申請日時の起点 */
                openedAtStart?: string;
                /** @description 申請日時の終点 */
                openedAtEnd?: string;
                /** @description 完了日時の起点 */
                completedAtStart?: string;
                /** @description 完了日時の終点 */
                completedAtEnd?: string;
                /** @description アーカイブ日時の起点 */
                archivedAtStart?: string;
                /** @description アーカイブ日時の終点 */
                archivedAtEnd?: string;
                /** @description 現在の承認ステップ名 */
                stepTitle?: string;
                /** @description 承認の保留状態でチケットを絞り込みます。
                 *     - true: 保留中のチケットのみを取得
                 *     - false: 保留されていないチケットのみを取得 */
                pending?: "true" | "false";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticketWithStep"][];
                };
            };
        };
    };
    "get-tickets-ticketId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticketDetail"];
                };
            };
        };
    };
    "patch-tickets-ticketId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description ステータス。更新ではdraft, in_progress, rejectedのみ選択可能です。
                     * @enum {string}
                     */
                    status?: "draft" | "in_progress" | "rejected";
                    /**
                     * Format: uuid
                     * @description 申請チームのUUID
                     */
                    authorTeamId?: string;
                    /**
                     * Format: uuid
                     * @description 依頼者となるユーザーのUUID。代理申請の場合のみ指定してください。
                     */
                    proxyClientUserId?: string;
                    /** @description チケットのタイトル。ワークフローでallow_titleがtrueのときのみ設定可能です。 */
                    title?: string;
                    /** @description 明細アイテムの配列 */
                    slipItems?: {
                        /** @description 明細アイテム入力の配列 */
                        inputs: {
                            /** @description 明細フィールドのUUID。slipFieldIdまたはslipFieldCodeは片方のみ必須です。 */
                            slipFieldId?: string | null;
                            /** @description 明細フィールドのコード。slipFieldIdまたはslipFieldCodeは片方のみ必須です。 */
                            slipFieldCode?: string | null;
                            /** @description 入力値。フィールドがチェックボックスタイプのときは配列で指定してください。 */
                            value?: (string | null) | string[];
                            /** @description 汎用マスタアイテムのUUID。フィールドが汎用マスタタイプのときのみ指定してください。 */
                            generalMasterItemId?: (string | null) | string[];
                            /** @description ユーザーUUID。フィールドがユーザータイプのときのみ指定してください。 */
                            userId?: (string | null) | string[];
                            /** @description チームUUID。フィールドがチームタイプのときのみ指定してください。 */
                            teamId?: (string | null) | string[];
                            /** @description チケットUUID。フィールドがチケットタイプのときのみ指定してください。 */
                            ticketId?: (string | null) | string[];
                            /** @description 添付ファイルの署名済みID。
                             *     フィールドがファイルタイプのときのみ指定してください。 */
                            files?: string[] | null;
                        }[];
                    }[];
                    /** @description フォームの入力の配列。
                     *     注意：申請者による更新時は、ワークフローのすべてのフォームフィールドに対応する入力を入れてください。
                     *     注意：承認者による更新時は、承認者用フィールドに対応する入力のみ入れてください。
                     *     注意：明細ワークフローの場合、slipItemsも同時にリクエストボディに入れてください。 */
                    inputs?: {
                        /**
                         * Format: uuid
                         * @description フォームフィールドのUUID。formFieldIdまたはformFieldCodeは片方のみ必須です。
                         */
                        formFieldId?: string | null;
                        /** @description フォームフィールドのコード。formFieldIdまたはformFieldCodeは片方のみ必須です。 */
                        formFieldCode?: string | null;
                        /** @description 入力値。フィールドがチェックボックスタイプのときは配列で指定してください。 */
                        value?: (string | null) | string[];
                        /** @description 汎用マスタアイテムのUUID。フィールドが汎用マスタタイプのときのみ指定してください。 */
                        generalMasterItemId?: (string | null) | string[];
                        /** @description ユーザーUUID。フィールドがユーザータイプのときのみ指定してください。 */
                        userId?: (string | null) | string[];
                        /** @description チームUUID。フィールドがチームタイプのときのみ指定してください。 */
                        teamId?: (string | null) | string[];
                        /** @description チケットUUID。フィールドがチケットタイプのときのみ指定してください。 */
                        ticketId?: (string | null) | string[];
                        /** @description 添付ファイルの署名済みID。
                         *     フィールドがファイルタイプのときのみ指定してください。 */
                        files?: string[] | null;
                    }[];
                    /** @description クラウドサイン書類。ワークフローでクラウドサイン連携が有効な場合のみ指定してください。 */
                    cloudSignDocument?: {
                        /** @description クラウドサイン書類のID */
                        id: string;
                        /** @description クラウドサイン書類のタイトル */
                        title: string;
                        /** @description クラウドサインのサンドボックス環境の場合true */
                        sandbox: boolean;
                    };
                    /** @description 承認タイプが「申請者が指名」の経路ステップの承認者を指定する配列。 */
                    approvers?: {
                        /** @description 承認者を指定する経路ステップのコード */
                        routeStepCode: string;
                        /** @description 承認者として指定するユーザーのUUID */
                        userId: string[];
                    }[] | null;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticketDetail"];
                };
            };
        };
    };
    "post-tickets-ticketId-approve": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticketDetail"];
                };
            };
        };
    };
    "post-tickets-ticketId-reject": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description 差し戻し先のステップ番号（0が起票者、1が最初の承認ステップ） */
                    to: number;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticketDetail"];
                };
            };
        };
    };
    "post-tickets-ticketId-deny": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticketDetail"];
                };
            };
        };
    };
    "post-tickets-ticketId-withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticketDetail"];
                };
            };
        };
    };
    "post-tickets-ticketId-archive": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticketDetail"];
                };
            };
        };
    };
    "get-tickets-ticketId-links": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
            };
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticket"][];
                };
            };
        };
    };
    "get-tickets-id-viewers": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description ソート。 指定可能なフィールド: createdAt */
                sortBy?: string;
            };
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticketViewer"][];
                };
            };
        };
    };
    "post-tickets-id-viewers": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description ユーザーのUUID。userIdとteamIdは片方のみ必須です。 */
                    userId?: (string | string[]) | null;
                    /** @description チームのUUID。userIdとteamIdは片方のみ必須です。 */
                    teamId?: (string | string[]) | null;
                    /**
                     * Format: uuid
                     * @description 役職のUUID。teamId指定時のみ、任意で指定できます。
                     */
                    gradeId?: string | null;
                    /** @description 下位のチームを含めるかどうかをteamId指定時のみ指定できます。未指定時はfalse扱いです。 */
                    descendants?: boolean | null;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "delete-tickets-id-viewers-viewerId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
                /** @description 共有ユーザーのUUID */
                viewerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-tickets-id-comments": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description ソート。 指定可能なフィールド: createdAt */
                sortBy?: string;
            };
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["comment"][];
                };
            };
        };
    };
    "post-tickets-id-comments": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description 本文 */
                    body: string;
                    /** @description 添付ファイルの署名済みID */
                    files?: string[] | null;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["comment"];
                };
            };
        };
    };
    "get-tickets-id-comments-commentId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
                /** @description コメントのUUID */
                commentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["comment"];
                };
            };
        };
    };
    "delete-tickets-id-comments-commentId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
                /** @description コメントのUUID */
                commentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "patch-tickets-id-comments-commentId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チケットのUUID */
                ticketId: string;
                /** @description コメントのUUID */
                commentId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description 本文 */
                    body: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["comment"];
                };
            };
        };
    };
    "get-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["userDetail"];
                };
            };
        };
    };
    "get-users": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description ステータスによる絞り込み */
                status?: ("invited" | "activated" | "suspended" | "deactivated")[];
                /** @description ソート。
                 *     指定可能なフィールド: email, code */
                sortBy?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    /** @description Link header (RFC-5988) */
                    Link?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["user"][];
                };
            };
        };
    };
    "post-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: email
                     * @description メールアドレス
                     */
                    email: string;
                    /** @description コード。未指定の場合、ランダムな英数字がセットされます。 */
                    code: string;
                    /** @description 名 */
                    firstName: string;
                    /** @description 姓 */
                    lastName: string;
                    /** @description 招待メールを送信する場合true（デフォルト）、送信しない場合false */
                    sendEmail?: boolean;
                    /** @description 社員番号 */
                    employeeId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["userDetail"];
                };
            };
        };
    };
    "get-users-userId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["userDetail"];
                };
            };
        };
    };
    "delete-users-userId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["userDetail"];
                };
            };
        };
    };
    "patch-users-userId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: email
                     * @description メールアドレス
                     */
                    email?: string;
                    /** @description コード */
                    code?: string;
                    /** @description 名 */
                    firstName?: string;
                    /** @description 姓 */
                    lastName?: string;
                    /** @description 社員番号 */
                    employeeId?: string | null;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["userDetail"];
                };
            };
        };
    };
    "get-users-lookupByEmail": {
        parameters: {
            query: {
                /** @description メールアドレス（URLエンコードを行ったもの） */
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["userDetail"];
                };
            };
        };
    };
    "post-users-userId-reinvite": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["user"];
                };
            };
        };
    };
    "post-users-userId-suspend": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["user"];
                };
            };
        };
    };
    "post-users-userId-reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["user"];
                };
            };
        };
    };
    "get-users-userId-teams": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description trueの場合、申請可能なチームのみ返す。デフォルトはfalse（すべてのチームを返す） */
                submittable?: boolean;
            };
            header?: never;
            path: {
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team"][];
                };
            };
        };
    };
    "get-users-userId-roles": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
            };
            header?: never;
            path: {
                /** @description ユーザーのUUIDまたはコード */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["role"][];
                };
            };
        };
    };
    "get-routes": {
        parameters: {
            query?: {
                /** @description ページ。1が最初のページ。 */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description ソート。ソート可能なフィールド: createdAt, folderId */
                sortBy?: string;
                /** @description ステータス */
                status?: ("visible" | "error")[];
                /** @description フォルダのUUID */
                folderId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["route"][];
                };
            };
        };
    };
    "get-routes-routeId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 経路のUUIDまたはコード */
                routeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["routeDetail"];
                };
            };
        };
    };
    "get-workflows": {
        parameters: {
            query?: {
                /** @description ページ。1が最初のページ。 */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description ソート。ソート可能なフィールド: createdAt, updatedAt, name, status */
                sortBy?: string;
                /** @description ステータス */
                status?: ("visible" | "invisible")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["workflow"][];
                };
            };
        };
    };
    "get-workflows-workflowId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ワークフローのUUIDまたはコード */
                workflowId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["workflowDetail"];
                };
            };
        };
    };
    "get-proxyApplicants": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["proxyApplicant"][];
                };
            };
        };
    };
    "post-proxyApplicants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: uuid
                     * @description 代理されるユーザーID
                     */
                    userId: string;
                    /**
                     * Format: uuid
                     * @description 代理するユーザーID
                     */
                    proxyUserId: string;
                    /**
                     * Format: date
                     * @description 開始日。nullの場合、すでに開始しているものとして扱います。
                     */
                    startsOn?: string | null;
                    /**
                     * Format: date
                     * @description 終了日。nullの場合、無期限のものとして扱います。
                     */
                    endsOn?: string | null;
                    /** @description 対象ワークフローのID */
                    workflowIds?: string[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["proxyApplicant"];
                };
            };
        };
    };
    "delete-proxyApplicants-proxyApplicantId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 代理申請のUUID */
                proxyApplicantId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-proxyApprovers": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["proxyApprover"][];
                };
            };
        };
    };
    "post-proxyApprovers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: uuid
                     * @description 代理されるユーザーID
                     */
                    userId: string;
                    /**
                     * Format: uuid
                     * @description 代理するユーザーID
                     */
                    proxyUserId: string;
                    /**
                     * Format: date
                     * @description 開始日。nullの場合、すでに始まっているものとして扱います。
                     */
                    startsOn?: string | null;
                    /**
                     * Format: date
                     * @description 終了日。nullの場合、無期限として扱います。
                     */
                    endsOn?: string | null;
                    /** @description 対象ワークフローのID */
                    workflowIds?: string[];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["proxyApprover"];
                };
            };
        };
    };
    "delete-proxyApprovers-proxyApproverId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 代理承認のUUID */
                proxyApproverId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post-files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** @description 添付ファイル */
                    file?: unknown;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description 添付ファイルの署名済みID */
                        signedId: string;
                    };
                };
            };
        };
    };
    "get-files-signedId": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 添付ファイルの署名済みID */
                signedId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: uri
                         * @description Amazon S3のURL
                         */
                        url: string;
                        /** @description ファイル名 */
                        filename: string;
                        /** @description チェックサム */
                        checksum: string;
                        /** @description バイト数 */
                        byteSize: number;
                        /** @description Content-Type */
                        contentType: string;
                        /**
                         * Format: date-time
                         * @description 作成日時
                         */
                        createdAt: string;
                    };
                };
            };
        };
    };
    "get-audit-logs": {
        parameters: {
            query?: {
                /** @description ページ */
                page?: number;
                /** @description 1ページあたりの件数 */
                perPage?: number;
                /** @description ソート。指定可能なフィールド: createdAt */
                sortBy?: string;
                /** @description 作成日時の起点 */
                createdAtStart?: string;
                /** @description 作成日時の終点 */
                createdAtEnd?: string;
                /** @description ユーザーID */
                userId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["auditLog"][];
                };
            };
        };
    };
}
